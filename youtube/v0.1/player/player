args = args || {};
if (typeof args == 'string') {
    args = {idVideo: args};
}
var url = 'http://www.youtube.com/v/' + (args.idVideo || 'g1BV7XTLUNg')

jsClientApi({
    name: "youtube.player",
	data: {
		url: url,
		width: args.width,
		height: args.height || '300',
		params: {allowScriptAccess: "always", wmode: "Opaque"}
	},
	initialize: function(callback) {
		$.getScript("http://webshell.local/lib/swfobject/swfobject.js", function() {eval(callback + '()')});
	},
	loaded: function() {
	},
	create: function(jsapi) {
		swfobject.embedSWF(
			this.data.url + '?version=3&f=videos&app=youtube_gdata&enablejsapi=1&playerapiid=player' + this.data.pid,
			"ytapiplayer" + this.data.pid,
			this.data.width || $('#ytapiplayer' + this.data.pid).width(),
			this.data.height,
			"8",
			null,
			null,
			this.data.params,
			{id: 'player' + this.data.pid }
		);
        this.player = document.getElementById("player" + this.data.pid);
        var self = this;
        setTimeout(function() {self.ready(jsapi)}, 400);
        return false;
	},
	ready: function(jsapi) {
		jsapi.ready();
	},
	interface: {
		playVideo: function() {
            this.player.playVideo();
        },
        pauseVideo: function() {
            this.player.pauseVideo();
        },
        stopVideo: function() {
            this.player.stopVideo();
        },
        seekTo: function(seconds, allowSeekAhread) {
            this.player.seekTo(seconds, allowSeekAhread);
        },
        clearVideo: function() {
            this.player.clearVideo();
        },
        cue:function(url, startSeconds, suggestedQuality) {
            if (url.substr(0, 7) == 'http://')
                this.player.cueVideoByUrl(url, startSeconds, suggestedQuality)
            else
                this.player.cueVideoById(url, startSeconds, suggestedQuality)

        },
        load:function(url, startSeconds, suggestedQuality) {
            if (url.substr(0, 7) == 'http://')
                this.player.loadVideoByUrl(url, startSeconds, suggestedQuality)
            else
                this.player.loadVideoById(url, startSeconds, suggestedQuality)
        },
        loadPlaylist: function(playlist, index, startSeconds, suggestedQuality) {
            this.player.loadPlaylist(pid, playlist, index, startSeconds, suggestedQuality)
        },
        cuePlaylist: function(playlist, index, startSeconds, suggestedQuality) {
            this.player.cuePlaylist(pid, playlist, index, startSeconds, suggestedQuality)
        },
        nextVideo: function() {
            this.player.nextVideo();
        },
        previousVideo: function() {
            this.player.previousVideo();
        },
        playVideoAt: function(index) {
            this.player.playVideoAt(index);
        },
        mute: function() {
            this.player.mute();
        },
        unmute: function() {
            this.player.unMute();
        },
        setVolume: function(value) {
            this.player.setVolume(value);
        },
        loop: function(activate) {
            this.player.loop(activate);
        },
        shuffle: function(activate) {
            this.player.shuffle(activate);

        },
        setPlaybackQuality: function(quality) {
            this.player.setPlaybackQuality(quality);
        }
	}
}, {
	view: '<div id="ytapiplayer<%= data.pid %>"></div>'
});
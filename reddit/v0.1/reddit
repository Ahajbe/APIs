function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def !== undefined)
		args[param] = def;
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (type == 'int' && args[param] !== undefined && (parseFloat(args[param]) != parseInt(args[param], 10) || isNaN(args[param])))
		throw new Error(param + ' must be an integer');
	if (url.indexOf('{' + param + '}') !== -1) {
		var rgx = new RegExp('\\{' + param + '\\}', 'g');
		url = url.replace(rgx, args[param]);
		delete args[param];
	}
	return url;
}

var provider = fs('/bin/reddit');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Returns information about a link given its fullname.               
 * @category Link
 * @param {string} fullname  A base-36 id of the form /t[0-9]+_[a-z0-9]+/ (e.g. t3_6nw57) that reddit associates with every Thing. In the example, the type prefix t3_ specifies that the fullname is for a Link, and the id 6nw57 specifies the Link's id36. (Note: the numbers according to id type are not constant, and may vary between reddit installations.)               
 * @param {string} format  Format of the data being returned. Accepted values: json (JSON), rss (RSS feed), xml (RSS feed)               
 * @methodhttp GET
 */
exports.linkByFullname = function(args, opts) {
	var url = 'http://www.reddit.com/by_id/{fullname}.{format}';
	args = args || {};
	url = url_replace(url, args, 'fullname', 'str', true);
	url = url_replace(url, args, 'format', 'str', true, "json");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns information about a link, with comments, given its id36.               
 * @category Link
 * @param {string} id36  The second part of the fullname, a base-36 id of the form /t[0-9]+_[a-z0-9]+/ (e.g. t3_6nw57) that reddit associates with every Thing. In the example, the type prefix t3_ specifies that the fullname is for a Link, and the id 6nw57 specifies the Link's id36. (Note: the numbers according to id type are not constant, and may vary between reddit installations.)               
 * @param {string} format  Format of the data being returned. Accepted values: json (JSON), rss (RSS feed), xml (RSS feed)               
 * @methodhttp GET
 */
exports.linkByFullnameComments = function(args, opts) {
	var url = 'http://www.reddit.com/comments/{id36}.{format}';
	args = args || {};
	url = url_replace(url, args, 'id36', 'str', true);
	url = url_replace(url, args, 'format', 'str', true, "json");
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns information about a URL's submissions.               
 * @category Link
 * @param {string} format  Format of the data being returned. Accepted values: json (JSON), xml (XML)               
 * @param {anyURI} [url]  Format: a URL. Specify either this or id.                       
 * @param {string} [id]  Format: a link ID. Specify either this or url.                       
 * @param {integer} [limit]  Presumably, limits the number of links returned. Format: a number.                       
 * @methodhttp GET
 */
exports.getInfo = function(args, opts) {
	var url = 'http://www.reddit.com/api/info.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', true, "json");
	url = url_replace(url, args, 'url');
	url = url_replace(url, args, 'id', 'str');
	url = url_replace(url, args, 'limit', 'int');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns expanded link content.               
 * @category Link
 * @param {string} link_id  The link to expand.                       
 * @methodhttp POST
 */
exports.postExpando = function(args, opts) {
	var url = 'http://www.reddit.com/api/expando';
	args = args || {};
	url = url_replace(url, args, 'link_id', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Logs a user in. Returns a SetCookie line in the HTTP header, identifying the new session.               
 * @category User
 * @param {string} username  The username to log in as.               
 * @param {string} user  The username to authenticate as. This is redundant, but required.                       
 * @param {string} passwd  The plain-text password for the account.                       
 * @param {string} api_type  Must be "json" for the style of auth used in this documentation.                       
 * @methodhttp POST
 */
exports.login = function(args, opts) {
	var url = 'http://www.reddit.com/api/login/{username}';
	args = args || {};
	url = url_replace(url, args, 'username', 'str', true);
	url = url_replace(url, args, 'user', 'str', true);
	url = url_replace(url, args, 'passwd', 'str', true);
	url = url_replace(url, args, 'api_type', 'str', true, "json");
	return http.post({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Retrieves information from a user's "about" page, including karma totals.               
 * @category User
 * @param {string} username  The name of the user whose "about" page to retrieve.               
 * @methodhttp GET
 */
exports.userAbout = function(args, opts) {
	var url = 'http://www.reddit.com/user/{username}/about.json';
	args = args || {};
	url = url_replace(url, args, 'username', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns information about the logged-in user.               
 * @category User
 * @methodhttp GET
 */
exports.getMe = function(args, opts) {
	var url = 'http://www.reddit.com/api/me.json';
	args = args || {};
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns information about the subreddits the currently logged-in user subscribes to.               
 * @category User
 * @param {string} format  Format of the data being returned. Accepted values: json (JSON), xml (XML)               
 * @methodhttp GET
 */
exports.getMine = function(args, opts) {
	var url = 'http://www.reddit.com/reddits/mine.{format}';
	args = args || {};
	url = url_replace(url, args, 'format', 'str', true, "json");
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Registers a new user.               
 * @category User
 * @param {string} user  The username to register.                       
 * @param {string} email  The user's email address.                       
 * @param {string} passwd  The user's password.                       
 * @param {string} passwd2  The user's password, again. Has to be the same as "passwd".                       
 * @param {string} dest  Destination?                       
 * @param {boolean} rem  Format: boolean                       
 * @param {boolean} reason  Possible accepted values: redirect, subscribe                       
 * @methodhttp POST
 */
exports.postRegister = function(args, opts) {
	var url = 'http://www.reddit.com/api/register';
	args = args || {};
	url = url_replace(url, args, 'user', 'str', true);
	url = url_replace(url, args, 'email', 'str', true);
	url = url_replace(url, args, 'passwd', 'str', true);
	url = url_replace(url, args, 'passwd2', 'str', true);
	url = url_replace(url, args, 'dest', 'str', true);
	url = url_replace(url, args, 'rem', 'null', true);
	url = url_replace(url, args, 'reason', 'null', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Permanently deletes the logged-in user.               
 * @category User
 * @param {string} areyousure1  Verification. All three parameters must be "yes" to delete user successfully. Accepted values: yes, no                       
 * @param {string} areyousure2  Verification. All three parameters must be "yes" to delete user successfully. Accepted values: yes, no                       
 * @param {string} areyousure2  Verification. All three parameters must be "yes" to delete user successfully. Accepted values: yes, no                       
 * @methodhttp POST
 */
exports.postDeleteUser = function(args, opts) {
	var url = 'http://www.reddit.com/api/delete_user';
	args = args || {};
	url = url_replace(url, args, 'areyousure1', 'str', true);
	url = url_replace(url, args, 'areyousure2', 'str', true);
	url = url_replace(url, args, 'areyousure2', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Handles self-removal as moderator from a subreddit as rendered in the subreddit sidebox on any of that subreddit's pages.               
 * @category User
 * @param {string} id  ID?                       
 * @methodhttp POST
 */
exports.postLeavemoderator = function(args, opts) {
	var url = 'http://www.reddit.com/api/leavemoderator';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Handles self-removal as contributor from a subreddit as rendered in the subreddit sidebox on any of that subreddit's pages.               
 * @category User
 * @param {string} id  ID?                       
 * @methodhttp POST
 */
exports.postLeavecontributor = function(args, opts) {
	var url = 'http://www.reddit.com/api/leavecontributor';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Sends a forgot-password message to an account holder.               
 * @category User
 * @param {string} name  A username with a valid email address.                       
 * @methodhttp POST
 */
exports.postPassword = function(args, opts) {
	var url = 'http://www.reddit.com/api/password';
	args = args || {};
	url = url_replace(url, args, 'name', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Resets a user's password.               
 * @category User
 * @param {string} reset  Cache key?                       
 * @param {string} passwd  The new password.                       
 * @param {string} passwd2  The new password, again. Must be the same as "passwd".                       
 * @methodhttp POST
 */
exports.postResetpassword = function(args, opts) {
	var url = 'http://www.reddit.com/api/resetpassword';
	args = args || {};
	url = url_replace(url, args, 'reset', 'str', true);
	url = url_replace(url, args, 'passwd', 'str', true);
	url = url_replace(url, args, 'passwd2', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Submits a link/story. For submitting to work, the reddit_session cookie needs to be present in the request, or the answer to a CAPTCHA must be supplied.               
 * @category Story
 * @param {string} [url]  The link to submit, if the "kind" parameter is "link". Required if the story is a regular post.                       
 * @param {string} [text]  The text to submit, if the "kind" parameter is "self". Required if the story is a self post.                       
 * @param {string} kind  Accepted values: link, self.                       
 * @param {string} sr  The subreddit to submit the link to.                       
 * @param {string} title  The text to appear as a link to the new story.                       
 * @param {string} r  The subreddit, again. (?)                       
 * @methodhttp POST
 */
exports.submit = function(args, opts) {
	var url = 'http://www.reddit.com/api/submit';
	args = args || {};
	url = url_replace(url, args, 'url', 'str');
	url = url_replace(url, args, 'text', 'str');
	url = url_replace(url, args, 'kind', 'str', true);
	url = url_replace(url, args, 'sr', 'str', true);
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'r', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Shares a link/story via email to a friend on the logged-in user's behalf. For sharing to work, the reddit_session cookie needs to be present in the request, or the answer to a CAPTCHA must be supplied.               
 * @category Story
 * @param {string} parent  The thing you want to share. See API docs for more details about things.                       
 * @param {string} share_from  The name of the person who is sending the message. Maximum 100 characters.                       
 * @param {string} replyto  The email address of the person who is sending the message.                       
 * @param {string} share_to  The email address of the recepient of the message.                       
 * @param {string} message  The text that precedes the link to the story in the message. Maximum 1000 characters.                       
 * @param {string} [renderstyle]  Presumably, the email format. Known accepted value: html                       
 * @methodhttp POST
 */
exports.share = function(args, opts) {
	var url = 'http://www.reddit.com/api/share';
	args = args || {};
	url = url_replace(url, args, 'parent', 'str', true);
	url = url_replace(url, args, 'share_from', 'str', true);
	url = url_replace(url, args, 'replyto', 'str', true);
	url = url_replace(url, args, 'share_to', 'str', true);
	url = url_replace(url, args, 'message', 'str', true);
	url = url_replace(url, args, 'renderstyle', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Casts or rescinds a vote on a story/comment.               
 * @category Story
 * @param {string} id  The fullname of the thing you are voting for.                       
 * @param {string} dir  The vote you are going to cast. Use 1 to vote up, 0 to rescind a vote, or -1 to vote down. Note that previous votes are not additive. If the user previously voted 1, voting -1 will change the vote to -1, not 0. Accepted values: -1 (downvote), 0 (neutral-vote), 1 (upvote)                       
 * @methodhttp POST
 */
exports.postVote = function(args, opts) {
	var url = 'http://www.reddit.com/api/vote';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'dir', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns the title for a story, given its URL.               
 * @category Story
 * @param {anyURL} url  The URL to fetch the title of.                       
 * @methodhttp POST
 */
exports.postFetchTitle = function(args, opts) {
	var url = 'http://www.reddit.com/api/fetch_title';
	args = args || {};
	url = url_replace(url, args, 'url', 'null', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Marks a thing as NSFW.               
 * @category Story
 * @param {string} id  The fullname of the thing to mark.                       
 * @methodhttp POST
 */
exports.postMarknsfw = function(args, opts) {
	var url = 'http://www.reddit.com/api/marknsfw';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Marks a thing as SFW (unmarks as NSFW)               
 * @category Story
 * @param {string} id  The fullname of the thing to unmark.                       
 * @methodhttp POST
 */
exports.postUnmarknsfw = function(args, opts) {
	var url = 'http://www.reddit.com/api/unmarknsfw';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Saves a post.               
 * @category Story
 * @param {string} id  The fullname of the post to save.                       
 * @methodhttp POST
 */
exports.postSave = function(args, opts) {
	var url = 'http://www.reddit.com/api/save';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Unsaves a post.               
 * @category Story
 * @param {string} id  The fullname of the post to unsave.                       
 * @methodhttp POST
 */
exports.postUnsave = function(args, opts) {
	var url = 'http://www.reddit.com/api/unsave';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Hides a post.               
 * @category Story
 * @param {string} id  The fullname of the post to hide.                       
 * @methodhttp POST
 */
exports.postHide = function(args, opts) {
	var url = 'http://www.reddit.com/api/hide';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Unhides a post.               
 * @category Story
 * @param {string} id  The fullname of the post to unhide.                       
 * @methodhttp POST
 */
exports.postUnhide = function(args, opts) {
	var url = 'http://www.reddit.com/api/unhide';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Deletes things.               
 * @category Thing
 * @param {string} id  The fullname of the thing to delete.                       
 * @methodhttp POST
 */
exports.postDel = function(args, opts) {
	var url = 'http://www.reddit.com/api/del';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Updates the user text on a thing.               
 * @category Thing
 * @param {string} thing_id  The fullname of the thing to update.                       
 * @param {string} text  The new text.                       
 * @methodhttp POST
 */
exports.postEditusertext = function(args, opts) {
	var url = 'http://www.reddit.com/api/editusertext';
	args = args || {};
	url = url_replace(url, args, 'thing_id', 'str', true);
	url = url_replace(url, args, 'text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Removes a thing.               
 * @category Thing
 * @param {string} id  The thing to remove.                       
 * @methodhttp POST
 */
exports.postRemove = function(args, opts) {
	var url = 'http://www.reddit.com/api/remove';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Approves a thing.               
 * @category Thing
 * @param {string} id  The thing to approve.                       
 * @methodhttp POST
 */
exports.postApprove = function(args, opts) {
	var url = 'http://www.reddit.com/api/approve';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Distinguishes a thing.               
 * @category Thing
 * @param {string} id  The thing to distinguish.                       
 * @param {string} how  Accepted values: yes, no, admin.                       
 * @methodhttp POST
 */
exports.postDistinguish = function(args, opts) {
	var url = 'http://www.reddit.com/api/distinguish';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'how', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Handles message composition under /message/compose               
 * @category Message
 * @param {string} to  The recepient of the message.                       
 * @param {string} subject  The subject of the message.                       
 * @param {string} text  The message.                       
 * @param {string} captcha  CAPTCHA result.                       
 * @methodhttp POST
 */
exports.postCompose = function(args, opts) {
	var url = 'http://www.reddit.com/api/compose';
	args = args || {};
	url = url_replace(url, args, 'to', 'str', true);
	url = url_replace(url, args, 'subject', 'str', true);
	url = url_replace(url, args, 'text', 'str', true);
	url = url_replace(url, args, 'captcha', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Collapses a message.               
 * @category Message
 * @param {string} id  A list of messages to collapse.                       
 * @methodhttp POST
 */
exports.postCollapseMessage = function(args, opts) {
	var url = 'http://www.reddit.com/api/collapse_message';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Collapses a message.               
 * @category Message
 * @param {string} id  A list of messages to uncollapse.                       
 * @methodhttp POST
 */
exports.postUncollapseMessage = function(args, opts) {
	var url = 'http://www.reddit.com/api/uncollapse_message';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Mark a message as unread.               
 * @category Message
 * @param {string} id  The message to mark as unread.                       
 * @methodhttp POST
 */
exports.postUnreadMessage = function(args, opts) {
	var url = 'http://www.reddit.com/api/unread_message';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Mark a message as read.               
 * @category Message
 * @param {string} id  The message to mark as read.                       
 * @methodhttp POST
 */
exports.postReadMessage = function(args, opts) {
	var url = 'http://www.reddit.com/api/read_message';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Hides a message.               
 * @category Message
 * @param {string} id  The message to hide.                       
 * @methodhttp POST
 */
exports.postHideMessage = function(args, opts) {
	var url = 'http://www.reddit.com/api/hide_message';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Unhides a message.               
 * @category Message
 * @param {string} id  The message to unhide.                       
 * @methodhttp POST
 */
exports.postUnhideMessage = function(args, opts) {
	var url = 'http://www.reddit.com/api/unhide_message';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Retrieves more messages by parent.               
 * @category Message
 * @param {string} parent_id  The message parent.                       
 * @methodhttp POST
 */
exports.postMoremessages = function(args, opts) {
	var url = 'http://www.reddit.com/api/moremessages';
	args = args || {};
	url = url_replace(url, args, 'parent_id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Posts a comment.               
 * @category Comment
 * @param {string} parent  The fullname of the thing or comment you are commenting on.                       
 * @param {string} text  The markdown content of the comment you are posting.                       
 * @methodhttp POST
 */
exports.postComment = function(args, opts) {
	var url = 'http://www.reddit.com/api/comment';
	args = args || {};
	url = url_replace(url, args, 'parent', 'str', true);
	url = url_replace(url, args, 'text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Retrieves more comment children.               
 * @category Comment
 * @param {string} link_id  The id of the link to get the comments for.                       
 * @param {string} where  Comment sorting option.                       
 * @param {string} children  Children comment IDs.                       
 * @param {string} pv_hex  Maximum 40 characters?                       
 * @param {string} id  Some kind of ID.                       
 * @methodhttp POST
 */
exports.postMorechildren = function(args, opts) {
	var url = 'http://www.reddit.com/api/morechildren';
	args = args || {};
	url = url_replace(url, args, 'link_id', 'str', true);
	url = url_replace(url, args, 'where', 'str', true);
	url = url_replace(url, args, 'children', 'str', true);
	url = url_replace(url, args, 'pv_hex', 'str', true);
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Complement to "unfriend": handles friending as well as privilege changes on subreddits.               
 * @category Friend
 * @param {string} [name]  The user to add as a friend.                       
 * @param {string} container  Either the current user or the subreddit.                       
 * @param {string} type  Accepted values: friend, moderator, contributor, banned                       
 * @param {string} [note]  A "friend note". Maximum 300 characters.                       
 * @methodhttp POST
 */
exports.postFriend = function(args, opts) {
	var url = 'http://www.reddit.com/api/friend';
	args = args || {};
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'container', 'str', true);
	url = url_replace(url, args, 'type', 'str', true);
	url = url_replace(url, args, 'note', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Handles removal of a friend (a user-user relation) or removal of a user's privileges from a subreddit (a user-subreddit relation).  The user can either be passed in by name (name) or by fullname (id).  'container' will either be the current user or the subreddit.               
 * @category Friend
 * @param {string} [name]  The user's name.                       
 * @param {string} id  The user's fullname.                       
 * @param {string} container  Either the current user or the subreddit.                       
 * @param {string} type  Accepted values: friend, moderator, contributor, banned                       
 * @methodhttp POST
 */
exports.postUnfriend = function(args, opts) {
	var url = 'http://www.reddit.com/api/unfriend';
	args = args || {};
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'id', 'str', true);
	url = url_replace(url, args, 'container', 'str', true);
	url = url_replace(url, args, 'type', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Attach a note to a friend.               
 * @category Friend
 * @param {string} [name]  The friend to whom to associate the note with.                       
 * @param {string} [note]  A note. Maximum 300 characters.                       
 * @methodhttp POST
 */
exports.postFriendNote = function(args, opts) {
	var url = 'http://www.reddit.com/api/friend_note';
	args = args || {};
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'note', 'str');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Handles /prefs/update for updating email address and password.               
 * @category Preferences
 * @param {string} curpass  The current password of the logged-in user. Required to update any setting.                       
 * @param {string} [email]  A new email.                       
 * @param {string} [newpass]  A new password.                       
 * @param {string} [verpass]  A new password, again. Must be the same as "newpass".                       
 * @param {boolean} [verify]  Whether or not to send an email verification letter? Format: boolean                       
 * @methodhttp POST
 */
exports.postUpdate = function(args, opts) {
	var url = 'http://www.reddit.com/api/update';
	args = args || {};
	url = url_replace(url, args, 'curpass', 'str', true);
	url = url_replace(url, args, 'email', 'str');
	url = url_replace(url, args, 'newpass', 'str');
	url = url_replace(url, args, 'verpass', 'str');
	url = url_replace(url, args, 'verify');
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Turns on the preference to show comments panel.               
 * @category Preferences
 * @methodhttp POST
 */
exports.postTbCommentspanelShow = function(args, opts) {
	var url = 'http://www.reddit.com/api/tb_commentspanel_show';
	args = args || {};
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Turns off the preference to show comments panel.               
 * @category Preferences
 * @methodhttp POST
 */
exports.postTbCommentspanelHide = function(args, opts) {
	var url = 'http://www.reddit.com/api/tb_commentspanel_hide';
	args = args || {};
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Creates or updates subreddits.               
 * @category Subreddit
 * @param {string} sr  Subreddit.                       
 * @param {string} name  Subreddit name.                       
 * @param {string} title  A title for the subreddit. Maximum 100 characters.                       
 * @param {string} header-title  A title for the subreddit for the header. Maximum 500 characters.                       
 * @param {string} domain  Subreddit domain. "Own a domain? Enter it here and then go to your DNS provider and add a CNAME record aliasing your domain to rhs.reddit.com. You will be able to access your reddit through your domain."                       
 * @param {string} description  Subreddit description. Maximum 5120 characters.                       
 * @param {string} lang  Subreddit language.                       
 * @param {boolean} over_18  Whether or not this is a "mature content" subreddit; viewers must be at least 18 years old.                       
 * @param {boolean} allow_top  Whether or not to allow this subreddit to be shown in the "default set".                       
 * @param {boolean} show_media  Whether or not to show thumbnails images of content.                       
 * @param {string} type  Subreddit type. Accepted values: public (anyone can view and submit), private (only approved members can view and submit), restricted (anyone can view, but only approved members can submit)                       
 * @param {string} link_type  Subreddit content options. Accepted values: any (any link type is allowed), link (only links to external sites allowed), self (only self posts allowed)                       
 * @param {string} sponsorship-text  Sponsorship text. Maximum 500 characters.                       
 * @param {string} sponsorship-name  Sponsorship name. Maximum 500 characters.                       
 * @param {string} sponsorship-url  Sponsorship URL. Maximum 500 characters.                       
 * @param {boolean} css_on_cname  Whether or not to show subreddit style while accessing the subreddit through the domain?                       
 * @methodhttp POST
 */
exports.postSiteAdmin = function(args, opts) {
	var url = 'http://www.reddit.com/api/site_admin';
	args = args || {};
	url = url_replace(url, args, 'sr', 'str', true);
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'title', 'str', true);
	url = url_replace(url, args, 'header-title', 'str', true);
	url = url_replace(url, args, 'domain', 'str', true);
	url = url_replace(url, args, 'description', 'str', true);
	url = url_replace(url, args, 'lang', 'str', true);
	url = url_replace(url, args, 'over_18', 'null', true);
	url = url_replace(url, args, 'allow_top', 'null', true);
	url = url_replace(url, args, 'show_media', 'null', true);
	url = url_replace(url, args, 'type', 'str', true);
	url = url_replace(url, args, 'link_type', 'str', true);
	url = url_replace(url, args, 'sponsorship-text', 'str', true);
	url = url_replace(url, args, 'sponsorship-name', 'str', true);
	url = url_replace(url, args, 'sponsorship-url', 'str', true);
	url = url_replace(url, args, 'css_on_cname', 'null', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Updates the CSS for a subreddit.               
 * @category Subreddit
 * @param {string} stylesheet_contents  The stylesheet.                       
 * @param {string} op  Operation. Accepted values: save, preview                       
 * @methodhttp POST
 */
exports.postSubredditStylesheet = function(args, opts) {
	var url = 'http://www.reddit.com/api/subreddit_stylesheet';
	args = args || {};
	url = url_replace(url, args, 'stylesheet_contents', 'str', true);
	url = url_replace(url, args, 'op', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Deletes a subreddit image. Called called upon requested delete on /about/stylesheet. Updates the site's image list, and causes the <li> which wraps the image to be hidden.               
 * @category Subreddit
 * @param {string} img_name  The image to delete.                       
 * @methodhttp POST
 */
exports.postDeleteSrImg = function(args, opts) {
	var url = 'http://www.reddit.com/api/delete_sr_img';
	args = args || {};
	url = url_replace(url, args, 'img_name', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Called when the user request that the header on a subreddit be reset.               
 * @category Subreddit
 * @param {string} img_name  The image to delete.                       
 * @methodhttp POST
 */
exports.postDeleteSrHeader = function(args, opts) {
	var url = 'http://www.reddit.com/api/delete_sr_header';
	args = args || {};
	url = url_replace(url, args, 'img_name', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Completely unnecessary method which exists because safari can be dumb too.  On page reload after an image has been posted in safari, the iframe to which the request posted preserves the URL of the POST, and safari attempts to execute a GET against it.  The iframe is hidden, so what it returns is completely irrelevant.               
 * @category Subreddit
 * @methodhttp GET
 */
exports.getUploadSrImg = function(args, opts) {
	var url = 'http://www.reddit.com/api/upload_sr_img';
	args = args || {};
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Called on /about/stylesheet when an image needs to be replaced or uploaded, as well as on /about/edit for updating the header.  Unlike every other POST in this controller, this method does not get called with Ajax but rather is from the original form POSTing to a hidden iFrame.  Unfortunately, this means the response needs to generate an page with a script tag to fire the requisite updates to the parent document, and, more importantly, that we can't use our normal toolkit for passing those responses back. The result of this function is a rendered UploadedImage() object in charge of firing the completedUploadImage() call in JS.               
 * @category Subreddit
 * @param {string} name  The name for the image.                       
 * @param {string} formid  Form ID. Maximum 100 characters.                       
 * @param {boolean} header  Whether or not this is a header image? Accepted values: 0, 1                       
 * @param {boolean} sponsor  Whether or not something is sponsored? Used by admins only. Accepted values: 0, 1                       
 * @methodhttp POST
 */
exports.postUploadSrImg = function(args, opts) {
	var url = 'http://www.reddit.com/api/upload_sr_img';
	args = args || {};
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'formid', 'str', true);
	url = url_replace(url, args, 'header', 'null', true);
	url = url_replace(url, args, 'sponsor', 'null', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Subscribes or unsubscribes the logged-in user to a subreddit.               
 * @category Subreddit
 * @param {string} action  Accepted values: sub (subscribe), unsub (unsubscribe)                       
 * @param {string} sr  The subreddit.                       
 * @methodhttp POST
 */
exports.postSubscribe = function(args, opts) {
	var url = 'http://www.reddit.com/api/subscribe';
	args = args || {};
	url = url_replace(url, args, 'action', 'str', true);
	url = url_replace(url, args, 'sr', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Searches for subreddits with the given query.               
 * @category Subreddit
 * @param {string} query  The search query. Maximum 50 characters.                       
 * @methodhttp POST
 */
exports.postSearchRedditNames = function(args, opts) {
	var url = 'http://www.reddit.com/api/search_reddit_names';
	args = args || {};
	url = url_replace(url, args, 'query', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Returns the flair assignments of a subreddit.               
 * @category Flair
 * @param {string} r  The name of the subreddit.                       
 * @param {positiveInteger} limit  The maximum number of items to return (up to 1000).                       
 * @param {string} after  Return entries starting after this user.                       
 * @param {string} before  Return entries starting before this user.                       
 * @methodhttp GET
 */
exports.flairlist = function(args, opts) {
	var url = 'http://www.reddit.com/api/flairlist';
	args = args || {};
	url = url_replace(url, args, 'r', 'str', true);
	url = url_replace(url, args, 'limit', 'null', true, "100");
	url = url_replace(url, args, 'after', 'str', true);
	url = url_replace(url, args, 'before', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Sets or clears a user's flair in a subreddit.               
 * @category Flair
 * @param {string} r  The name of the subreddit.                       
 * @param {string} name  The name of the user.                       
 * @param {string} [text]  The flair text to assign. Note: If an empty string is assigned to both text and css_class, then flair for the user will be removed.                       
 * @param {string} [css_class]  The CSS class to assign to the flair text. Note: If an empty string is assigned to both text and css_class, then flair for the user will be removed.                       
 * @methodhttp GET
 */
exports.flair = function(args, opts) {
	var url = 'http://www.reddit.com/api/flair';
	args = args || {};
	url = url_replace(url, args, 'r', 'str', true);
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'text', 'str');
	url = url_replace(url, args, 'css_class', 'str');
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * Posts a CSV file of flair settings to a subreddit.               
 * @category Flair
 * @param {string} r  The name of the subreddit.                       
 * @param {string} flair_csv  CSV file contents, up to 100 lines.                       
 * @methodhttp POST
 */
exports.flaircsv = function(args, opts) {
	var url = 'http://www.reddit.com/api/flaircsv.json';
	args = args || {};
	url = url_replace(url, args, 'r', 'str', true);
	url = url_replace(url, args, 'flair_csv', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Sends user feedback to Reddit admins.               
 * @category Other
 * @param {string} name  A name.                       
 * @param {string} email  An email.                       
 * @param {string} reason  A reason for feedback. Accepted values: ad_inq (advertising inquiry), feedback, i18n (internationalization).                       
 * @param {string} text  The feedback.                       
 * @methodhttp POST
 */
exports.postFeedback = function(args, opts) {
	var url = 'http://www.reddit.com/api/feedback';
	args = args || {};
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'email', 'str', true);
	url = url_replace(url, args, 'reason', 'str', true);
	url = url_replace(url, args, 'text', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Reports a thing.               
 * @category Other
 * @param {string} id  The fullname of the thing to report.                       
 * @methodhttp POST
 */
exports.postReport = function(args, opts) {
	var url = 'http://www.reddit.com/api/report';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Returns search results.               
 * @category Other
 * @param {string} q  Search query. Maximum 500 characters.                       
 * @param {string} sort  Sort option. Maximum 10 characters.                       
 * @param {string} t  Maximum 10 characters.                       
 * @param {boolean} approval  Format: boolean.                       
 * @methodhttp POST
 */
exports.postSearchfeedback = function(args, opts) {
	var url = 'http://www.reddit.com/api/searchfeedback';
	args = args || {};
	url = url_replace(url, args, 'q', 'str', true);
	url = url_replace(url, args, 'sort', 'str', true);
	url = url_replace(url, args, 't', 'str', true);
	url = url_replace(url, args, 'approval', 'null', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Does something with bookmarklets.               
 * @category Other
 * @param {string} what  Action. Accepted values: like, dislike, save.                       
 * @param {string} u  Array of link URLs?                       
 * @methodhttp GET
 */
exports.getBookmarklet = function(args, opts) {
	var url = 'http://www.reddit.com/api/bookmarklet';
	args = args || {};
	url = url_replace(url, args, 'what', 'str', true);
	url = url_replace(url, args, 'u', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};

/** 
 * @category Other
 * @param {string} hexkey  Maximum 32 characters.                       
 * @param {string} nickname  Maximum 1000 characters.                       
 * @param {string} status  Accepted values: new, severe, interesting, normal, fixed.                       
 * @methodhttp POST
 */
exports.postEditError = function(args, opts) {
	var url = 'http://www.reddit.com/api/edit_error';
	args = args || {};
	url = url_replace(url, args, 'hexkey', 'str', true);
	url = url_replace(url, args, 'nickname', 'str', true);
	url = url_replace(url, args, 'status', 'str', true);
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Removes the Reddit toolbar if it is enabled in the user's preferences               
 * @category Other
 * @methodhttp POST
 */
exports.postNoframe = function(args, opts) {
	var url = 'http://www.reddit.com/api/noframe';
	args = args || {};
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Adds the Reddit toolbar if it is disabled in the user's preferences               
 * @category Other
 * @methodhttp POST
 */
exports.postFrame = function(args, opts) {
	var url = 'http://www.reddit.com/api/frame';
	args = args || {};
	return http.post({provider:provider,url:url,params:args}, opts);
};

/** 
 * Something related to the "recently viewed" sidebar gadget.               
 * @category Other
 * @param {string} type  The type of gadget? Accepted value: click.                       
 * @param {string} links  A list of links.                       
 * @methodhttp GET
 */
exports.getGadget = function(args, opts) {
	var url = 'http://www.reddit.com/api/gadget';
	args = args || {};
	url = url_replace(url, args, 'type', 'str', true, "click");
	url = url_replace(url, args, 'links', 'str', true);
	return http({provider:provider,url:url,params:args}, opts);
};
function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (url.indexOf('{' + param + '}') !== -1) {
		var rgx = new RegExp('\\{' + param + '\\}', 'g');
		url = url.replace(rgx, args[param]);
		delete args[param];
	}
	return url;
}

var provider = fs('/bin/trello');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Get an Action
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {boolean} [entities ]  Valid Values : true or false	   
 * @param {string} [fields]  Valid Values : 	      idMemberCreator	      data	      type	      date	   
 * @param {string} [member_fields]  Valid Values: (all or a comma-separated list of):	      avatarHash	      bio	      fullName	      initials	      status	      url	   
 * @param {boolean} [memberCreator]  Valid Values: true or false 	   
 * @param {string} [memberCreator_fields]  Valid Values: (all or a comma-separated list of):	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @methodhttp GET
 */
exports.getAction = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'entities ');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'memberCreator');
	url = url_replace(url, args, 'memberCreator_fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action by field.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} field  Valid Values: One of:	  idMemberCreator	  data	  type	  date
 * @methodhttp GET
 */
exports.getActionField = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/{field}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action by board.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @methodhttp GET
 */
exports.getActionBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/board';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action by board with fields.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  name	  desc	  closed	  idOrganization	  invited	  pinned	  url	  prefs	  invitations	  memberships	  subscribed	  labelNames
 * @methodhttp GET
 */
exports.getActionBoardField = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/board/{field}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action by card.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getActionCard = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/card';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action by card with field.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} [field]  Valid Values: all or a comma-separated list of:	  badges	  checkItemStates	  closed	  desc	  due	  idBoard	  idChecklists	  idList	  idMembers	  idShort	  idAttachmentCover	  manualCoverAttachment	  labels	  name	  pos	  subscribed	  url
 * @methodhttp GET
 */
exports.getActionCardField = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/card/{field}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'field', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action entities.
 * @category Action
 * @param {string} idAction  the idAction !
 * @methodhttp GET
 */
exports.getActionEntities = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/entities';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action list.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @methodhttp GET
 */
exports.getActionList = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/list';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action list with field.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  name	  closed	  idBoard	  pos	  subscribed
 * @methodhttp GET
 */
exports.getActionListField = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/list/{field}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action member.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getActionMember = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/member';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action member with field.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getActionMemberField = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/member/{field}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action membercreator.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getActionMembercreator = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/membercreator';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action membercreator with field.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getActionMembercretatorField = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/membercreator/{field}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action organization.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @methodhttp GET
 */
exports.getActionOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/organization';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get an action organization with field.
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  name	  displayName	  desc	  idBoards	  invited	  invitations	  memberships	  prefs	  powerUps	  url	  website	  logoHash
 * @methodhttp GET
 */
exports.getActionOrganizationField = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}/organization/{field}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * put an action .
 * @category Action
 * @param {string} idAction  the idAction !
 * @param {string} values  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.putAction = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}text';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	url = url_replace(url, args, 'values', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete an action .
 * @category Action
 * @param {string} idAction  the idAction !
 * @methodhttp DELETE
 */
exports.deleteAction = function(args, opts) {
	var url = 'https://api.trello.com/1/actions/{idAction}';
	args = args || {};
	url = url_replace(url, args, 'idAction', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Get a board !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} [actions ]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	    	   
 * @param {string} [actions_format]  Valid Values: One of:	      count	      list	   
 * @param {string} [actions_since]  Valid Values: A date, null or lastView	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [cards]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [card_attachments]  Valid Values:	      true	      false	   
 * @param {string} [card_attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [lists]  Valid Values: One of:	      none	      open	      closed	      all	   
 * @param {string} [list_fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @param {string} [members]  Valid Values: One of:	      none	      normal	      admins	      owners	      all	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [membersInvited]  Valid Values: One of:	      none	      normal	      admins	      owners	      all	   
 * @param {string} [membersInvited_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checklists]  Valid Values: One of:	      none	      all	   
 * @param {string} [checklist_fields]  Valid Values: all or a comma-separated list of:	      name	      idBoard	   
 * @param {string} [organization]  Valid Values:	      true	      false	   
 * @param {string} [organization_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [myPrefs]  Valid Values:	      true	      false	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @methodhttp GET
 */
exports.getBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'actions ', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_format', 'str');
	url = url_replace(url, args, 'actions_since', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'cards', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'card_attachments', 'str');
	url = url_replace(url, args, 'card_attachment_fields', 'str');
	url = url_replace(url, args, 'lists', 'str');
	url = url_replace(url, args, 'list_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'membersInvited', 'str');
	url = url_replace(url, args, 'membersInvited_fields', 'str');
	url = url_replace(url, args, 'checklists', 'str');
	url = url_replace(url, args, 'checklist_fields', 'str');
	url = url_replace(url, args, 'organization', 'str');
	url = url_replace(url, args, 'organization_fields', 'str');
	url = url_replace(url, args, 'myPrefs', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board with field.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} field  Valid Values: One of:	  name	  desc	  closed	  idOrganization	  invited	  pinned	  url	  prefs	  invitations	  memberships	  subscribed	  labelNames
 * @methodhttp GET
 */
exports.getBoardField = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/{field}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board action.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} entities  Valid Values:	      true	      false	   
 * @param {string} filter  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} fields  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} limit  Valid Values: a number from 1 to 1000	   
 * @param {string} format  Valid Values: One of:	      count	      list	   
 * @param {string} since  Valid Values: A date, null or lastView	   
 * @param {string} before  Valid Values: A date or null	   
 * @param {string} page  Valid Values: a number from 0 to 100	   
 * @param {string} idModels  Valid Values: Only return actions related to these model ids	   
 * @methodhttp GET
 */
exports.getBoardAction = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/actions';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'entities', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	url = url_replace(url, args, 'fields', 'str', true);
	url = url_replace(url, args, 'limit', 'str', true);
	url = url_replace(url, args, 'format', 'str', true);
	url = url_replace(url, args, 'since', 'str', true);
	url = url_replace(url, args, 'before', 'str', true);
	url = url_replace(url, args, 'page', 'str', true);
	url = url_replace(url, args, 'idModels', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board cards.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} actions  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} attachments  Valid Values:	      true	      false	   
 * @param {string} attachment_fields  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} members  Valid Values:	      true	      false	   
 * @param {string} member_fields  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} checkItemStates  Valid Values:	      true	      false	   
 * @param {string} checklists  Valid Values: One of:	      none	      all	   
 * @param {string} filter  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} fields  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getBoardCards = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/cards';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'actions', 'str', true);
	url = url_replace(url, args, 'attachments', 'str', true);
	url = url_replace(url, args, 'attachment_fields', 'str', true);
	url = url_replace(url, args, 'members', 'str', true);
	url = url_replace(url, args, 'member_fields', 'str', true);
	url = url_replace(url, args, 'checkItemStates', 'str', true);
	url = url_replace(url, args, 'checklists', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	url = url_replace(url, args, 'fields', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board cards with filter.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} filter  Valid Values: One of:	  none	  visible	  open	  closed	  all
 * @methodhttp GET
 */
exports.getBoardCardsFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/cards/{filter}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board with a card id.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} idCard  Valid Values: The id (or short id) of a card on the board
 * @param {string} [attachments]  Valid Values:	      true	      false	   
 * @param {string} [attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [members]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checkItemStates]  Valid Values:	      true	      false	   
 * @param {string} [checkItemState_fields]  Valid Values: all or a comma-separated list of:	      idCheckItem	      state	   
 * @param {string} [labels]  Valid Values:	      true	      false	   
 * @param {string} [checklists]  Valid Values: One of:	      none	      all	   
 * @param {string} [checklist_fields]  Valid Values: all or a comma-separated list of:	      name	      idBoard	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getBoardByCardId = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/cards/{idCard}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'idCard', 'str', true);
	url = url_replace(url, args, 'attachments', 'str');
	url = url_replace(url, args, 'attachment_fields', 'str');
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'checkItemStates', 'str');
	url = url_replace(url, args, 'checkItemState_fields', 'str');
	url = url_replace(url, args, 'labels', 'str');
	url = url_replace(url, args, 'checklists', 'str');
	url = url_replace(url, args, 'checklist_fields', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board checklists.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} [cards]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [checkItems]  Valid Values: One of:	      none	      all	   
 * @param {string} [checkItem_fields]  Valid Values: all or a comma-separated list of:	      name	      type	      pos	   
 * @param {string} [filter]  Valid Values: One of:	      none	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      idBoard	   
 * @methodhttp GET
 */
exports.getBoardChecklists = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/checklists';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'cards', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'checkItems', 'str');
	url = url_replace(url, args, 'checkItem_fields', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board lists.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} [cards]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [filter]  Valid Values: One of:	      none	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @methodhttp GET
 */
exports.getBoardLists = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/lists';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'cards', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a board lists with filter.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} filter  Valid Values: One of:	  none	  open	  closed	  all
 * @methodhttp GET
 */
exports.getBoardListsWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/lists/{filter}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get the board members.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} filter  Valid Values: One of:	      none	      normal	      admins	      owners	      all	   
 * @param {string} fields  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} activity  Valid Values: true or false; works for premium organizations only.	   
 * @methodhttp GET
 */
exports.getBoardMembers = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/members';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	url = url_replace(url, args, 'fields', 'str', true);
	url = url_replace(url, args, 'activity', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get the board members with filter.
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} filter  Valid Values: One of:	  none	  normal	  admins	  owners	  all
 * @methodhttp GET
 */
exports.getBoardMembersWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/members/{filter}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [attachments]  Valid Values:	      true	      false	   
 * @param {string} [attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [members]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checkItemStates]  Valid Values:	      true	      false	   
 * @param {string} [checklists]  Valid Values: One of:	      none	      all	   
 * @param {string} [board]  Valid Values:	      true	      false	   
 * @param {string} [board_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [list]  Valid Values:	      true	      false	   
 * @param {string} [list_fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @param {string} [filter]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getBoardMemberWithCard = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/members/{idMember}/cards';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'attachments', 'str');
	url = url_replace(url, args, 'attachment_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'checkItemStates', 'str');
	url = url_replace(url, args, 'checklists', 'str');
	url = url_replace(url, args, 'board', 'str');
	url = url_replace(url, args, 'board_fields', 'str');
	url = url_replace(url, args, 'list', 'str');
	url = url_replace(url, args, 'list_fields', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get board Member Invited !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getBoardMemberInvited = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/membersInvited';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get board Member Invited with field!
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} field  Valid Values: One of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getBoardMemberInvitedWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/membersInvited/{field}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get board prefs!
 * @category Board
 * @param {string} board_id  the board id !
 * @methodhttp GET
 */
exports.getBoardPrefs = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/myPrefs';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get board organization!
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @methodhttp GET
 */
exports.getBoardOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/organization';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get board organization with field!
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} field  Valid Values: One of:	  name	  displayName	  desc	  idBoards	  invited	  invitations	  memberships	  prefs	  powerUps	  url	  website	  logoHash
 * @methodhttp GET
 */
exports.getBoardOrganizationWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/organization/{field}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * create a board!
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} [name]  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [desc]  Valid Values: A user ID or name	   
 * @param {string} [closed]  Valid Values:	      true	      false	   
 * @param {string} [subscribed]  Valid Values:	      true	      false	   
 * @param {string} [idOrganization]  Valid Values: A user ID or name	   
 * @param {string} [prefs/permissionLevel]  Valid Values: One of:	      private	      org	      public	   
 * @param {string} [prefs/selfJoin]  Valid Values:	      true	      false	   
 * @param {string} [prefs/cardCovers]  Valid Values:	      true	      false	   
 * @param {string} [prefs/invitations]  Valid Values: One of:	      members	      admins	   
 * @param {string} [prefs/voting]  Valid Values: One of:	      members	      org	      public	      disabled	   
 * @param {string} [prefs/comments]  Valid Values: One of:	      members	      org	      public	      disabled	   
 * @methodhttp PUT
 */
exports.createBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'desc', 'str');
	url = url_replace(url, args, 'closed', 'str');
	url = url_replace(url, args, 'subscribed', 'str');
	url = url_replace(url, args, 'idOrganization', 'str');
	url = url_replace(url, args, 'prefs/permissionLevel', 'str');
	url = url_replace(url, args, 'prefs/selfJoin', 'str');
	url = url_replace(url, args, 'prefs/cardCovers', 'str');
	url = url_replace(url, args, 'prefs/invitations', 'str');
	url = url_replace(url, args, 'prefs/voting', 'str');
	url = url_replace(url, args, 'prefs/comments', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * closed a board!
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.closedBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/closed';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * put a board desc!
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values: A user ID or name	   
 * @methodhttp PUT
 */
exports.putBoardDesc = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/desc';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * put a board organization!
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values: A user ID or name	   
 * @methodhttp PUT
 */
exports.putBoardOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/idOrganization';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * add a member to the board !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @param {string} type  Valid Values: One of:	      normal	      observer	      admin	   
 * @methodhttp PUT
 */
exports.addBoardMember = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/members/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'type', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * name or rename a board !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.renameBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/name';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.addBoardPrefCardCovers = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/prefs/cardCovers';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Add a board Pref comment !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values: One of:	      members	      org	      public	      disabled	   
 * @methodhttp PUT
 */
exports.addBoardPrefComments = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/prefs/comments';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Add a board Pref invitation !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values: One of:	      members	      admins	   
 * @methodhttp PUT
 */
exports.addBoardPrefInvitations = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/prefs/invitations';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Add a board Pref permissionLevel !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values: One of:	      private	      org	      public	   
 * @methodhttp PUT
 */
exports.addBoardPrefPermissionLevel = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/prefs/permissionLevel';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Add a board Pref selfjoin !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.addBoardPrefSelfJoin = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/prefs/selfjoin';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Add a board Pref voting !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values: One of:	      members	      org	      public	      disabled	   
 * @methodhttp PUT
 */
exports.addBoardPrefVoting = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/prefs/voting';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Subscribed to a board
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.subscribedToABoard = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/subscribed';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Post a board
 * @category Board
 * @param {string} name  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [desc]  Valid Values: A user ID or name	   
 * @param {string} [idOrganization]  Valid Values: The id or name of the organization to add the board to.	   
 * @param {string} [idBoardSource]  Valid Values: The id of the board to copy into the new board	   
 * @param {string} [keepFromSource]  Valid Values: Components of the source board to copy.	   
 * @param {string} [prefs_permissionLevel]  Valid Values: One of:	      private	      org	      public	   
 * @param {string} [prefs_voting]  Valid Values: One of:	      members	      observers	      org	      public	      disabled	   
 * @param {string} [prefs_comments]  Valid Values: One of:	      members	      observers	      org	      public	      disabled	   
 * @param {string} [prefs_invitations]  Valid Values: One of:	      members	      admins	   
 * @param {string} [prefs_selfJoin]  Valid Values:	      true	      false	   
 * @param {string} [prefs_cardCovers]  Valid Values:	      true	      false	   
 * @methodhttp POST
 */
exports.postBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/boards';
	args = args || {};
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'desc', 'str');
	url = url_replace(url, args, 'idOrganization', 'str');
	url = url_replace(url, args, 'idBoardSource', 'str');
	url = url_replace(url, args, 'keepFromSource', 'str');
	url = url_replace(url, args, 'prefs_permissionLevel', 'str');
	url = url_replace(url, args, 'prefs_voting', 'str');
	url = url_replace(url, args, 'prefs_comments', 'str');
	url = url_replace(url, args, 'prefs_invitations', 'str');
	url = url_replace(url, args, 'prefs_selfJoin', 'str');
	url = url_replace(url, args, 'prefs_cardCovers', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Post a board Checklists
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} name  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp POST
 */
exports.postBoardChecklists = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/checklists';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'name', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Post a board invitations
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} [idMember]  Valid Values: A user ID or name	   
 * @param {string} [email]  Valid Values: An email address	   
 * @param {string} [type]  Valid Values: One of:	      normal	      observer	      admin	   
 * @methodhttp POST
 */
exports.postBoardInvitations = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/invitations';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'idMember', 'str');
	url = url_replace(url, args, 'email', 'str');
	url = url_replace(url, args, 'type', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Response to a board invitations
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} response  Valid Values: One of:	  accept	  reject
 * @param {string} [invitationTokens]  Valid Values: A comma-separated list of unique identifier tokens	   
 * @methodhttp POST
 */
exports.responseToBoardInvitations = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/invitations/{response}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'response', 'str', true);
	url = url_replace(url, args, 'invitationTokens', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * post board lists !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} name  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [pos]  Valid Values: A position. top, bottom, or a positive number.	   
 * @methodhttp POST
 */
exports.postBoardLists = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/lists';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'pos', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Mark a board as viewed !
 * @category Board
 * @param {string} board_id  the board id !
 * @methodhttp POST
 */
exports.markBoardAsViewed = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/markAsViewed';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * post a board prefs !
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} name  Valid Values: One of:	      showSidebar	      showSidebarMembers	      showSidebarBoardActions	      showSidebarActivity	      showListGuide	   
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp POST
 */
exports.postBoardPrefs = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/myPrefs';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete a board invitation
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} idInvitation  Valid Values: The ID of an invitation
 * @methodhttp DELETE
 */
exports.deleteBoardInvitation = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/invitations/{idInvitation}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'idInvitation', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete a board Member
 * @category Board
 * @param {string} board_id  the board id !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @methodhttp DELETE
 */
exports.deleteBoardMember = function(args, opts) {
	var url = 'https://api.trello.com/1/boards/{board_id}/members/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'board_id', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * get a card !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [attachments]  Valid Values:	      true	      false	   
 * @param {string} [attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [members]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checkItemStates]  Valid Values:	      true	      false	   
 * @param {string} [checkItemState_fields]  Valid Values: all or a comma-separated list of:	      idCheckItem	      state	   
 * @param {string} [board]  Valid Values:	      true	      false	   
 * @param {string} [board_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [list]  Valid Values:	      true	      false	   
 * @param {string} [list_fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'attachments', 'str');
	url = url_replace(url, args, 'attachment_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'checkItemStates', 'str');
	url = url_replace(url, args, 'checkItemState_fields', 'str');
	url = url_replace(url, args, 'board', 'str');
	url = url_replace(url, args, 'board_fields', 'str');
	url = url_replace(url, args, 'list', 'str');
	url = url_replace(url, args, 'list_fields', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card with field!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} field  Valid Values: One of:	  badges	  checkItemStates	  closed	  desc	  due	  idBoard	  idChecklists	  idList	  idMembers	  idShort	  idAttachmentCover	  manualCoverAttachment	  labels	  name	  pos	  subscribed	  url
 * @methodhttp GET
 */
exports.getCardWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/{field}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card actions!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [entities]  Valid Values:	      true	      false	   
 * @param {string} [filter]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [format]  Valid Values: One of:	      count	      list	   
 * @param {string} [since]  Valid Values: A date, null or lastView	   
 * @param {string} [before]  Valid Values: A date or null	   
 * @param {string} [page]  Valid Values: a number from 0 to 100	   
 * @param {string} [idModels ]  Valid Values: Only return actions related to these model ids	   
 * @methodhttp GET
 */
exports.getCardActions = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/actions';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'entities', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'limit', 'str');
	url = url_replace(url, args, 'format', 'str');
	url = url_replace(url, args, 'since', 'str');
	url = url_replace(url, args, 'before', 'str');
	url = url_replace(url, args, 'page', 'str');
	url = url_replace(url, args, 'idModels ', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card attachments!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @methodhttp GET
 */
exports.getCardAttachments = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/attachments';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card board!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @methodhttp GET
 */
exports.getCardBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/board';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card board with field!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} field  Valid Values: One of:	  name	  desc	  closed	  idOrganization	  invited	  pinned	  url	  prefs	  invitations	  memberships	  subscribed	  labelNames
 * @methodhttp GET
 */
exports.getCardBoardWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/board/{field}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card checkItemStates!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      idCheckItem	      state	   
 * @methodhttp GET
 */
exports.getCardCheckItemStates = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/checkItemStates';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card checklists!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [cards]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [checkItems]  Valid Values: One of:	      none	      all	   
 * @param {string} [checkItem_fields]  Valid Values: all or a comma-separated list of:	      name	      type	      pos	   
 * @param {string} [filter]  Valid Values: One of:	      none	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      idBoard	   
 * @methodhttp GET
 */
exports.getCardChecklists = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/checklists';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'cards', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'checkItems', 'str');
	url = url_replace(url, args, 'checkItem_fields', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card list!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @methodhttp GET
 */
exports.getCardList = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/list';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card list with field!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} field  Valid Values: all or a comma-separated list of:	  name	  closed	  idBoard	  pos	  subscribed
 * @methodhttp GET
 */
exports.getCardListWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/list/{field}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card members!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @methodhttp GET
 */
exports.getCardMembers = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/members';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a card members voted!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @methodhttp GET
 */
exports.getCardMembersVoted = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/membersVoted';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * create a card !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [name]  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [desc]  Valid Values: A user ID or name	   
 * @param {string} [closed]  Valid Values:	      true	      false	   
 * @param {string} [idAttachmentCover]  Valid Values: Id of the image attachment of this card to use as its cover, or null for no cover	   
 * @param {string} [idList]  Valid Values: id of the list the card should be moved to	   
 * @param {string} [idBoard]  Valid Values: id of the board the card should be moved to	   
 * @param {string} [pos]  Valid Values: A position. top, bottom, or a positive number.	   
 * @param {string} [due]  Valid Values: A date, or null	   
 * @param {string} [warnWhenUpcoming]  Valid Values:	      true	      false	   
 * @param {string} [subscribed]  Valid Values:	      true	      false	   
 * @param {string} [suppressActions]  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.createCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'desc', 'str');
	url = url_replace(url, args, 'closed', 'str');
	url = url_replace(url, args, 'idAttachmentCover', 'str');
	url = url_replace(url, args, 'idList', 'str');
	url = url_replace(url, args, 'idBoard', 'str');
	url = url_replace(url, args, 'pos', 'str');
	url = url_replace(url, args, 'due', 'str');
	url = url_replace(url, args, 'warnWhenUpcoming', 'str');
	url = url_replace(url, args, 'subscribed', 'str');
	url = url_replace(url, args, 'suppressActions', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * put a card actions comments!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} idActions  Valid Values: The id of the action.
 * @param {string} text  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.addCardActionsComments = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/actions/{idAction}/comments';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idActions', 'str', true);
	url = url_replace(url, args, 'text', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * rename a checkItem in a card
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} idCheckList  Valid Values: The id of the checklist.
 * @param {string} idCheckItem  Valid Values: The id of the checkitem to modify.
 * @param {string} value  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.renameCardCheckItem = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/checklist/{idCheckList}/checkItem/{idCheckItem}/name';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idCheckList', 'str', true);
	url = url_replace(url, args, 'idCheckItem', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * add or change a position checkItem
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} idCheckList  Valid Values: The id of the checklist.
 * @param {string} idCheckItem  Valid Values: The id of the checkitem to modify.
 * @param {string} value  Valid Values: A position. top, bottom, or a positive number.	   
 * @methodhttp PUT
 */
exports.addCardCheckItemPos = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/checklist/{idCheckList}/checkItem/{idCheckItem}/pos';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idCheckList', 'str', true);
	url = url_replace(url, args, 'idCheckItem', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * add or change a state checkItem
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} idCheckList  Valid Values: The id of the checklist.
 * @param {string} idCheckItem  Valid Values: The id of the checkitem to modify.
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.addCardCheckItemState = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/checklist/{idCheckList}/checkItem/{idCheckItem}/state';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idCheckList', 'str', true);
	url = url_replace(url, args, 'idCheckItem', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Open or close a card 
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.closeCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/closed';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put a card Desc 
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: A user ID or name	   
 * @methodhttp PUT
 */
exports.putCardDesc = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/desc';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put a card Due 
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: A date, or null	   
 * @methodhttp PUT
 */
exports.putCardDue = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/due';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put a card attachment cover ! 
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: Id of the image attachment of this card to use as its cover, or null for no cover	   
 * @methodhttp PUT
 */
exports.addCardCover = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/idAttachmentCover';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * move a card in another board ! 
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: id of the board the card should be moved to	   
 * @param {string} [idList]  Valid Values: id of the list that the card should be moved to on the new board	   
 * @methodhttp PUT
 */
exports.moveCardBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/idBoard';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	url = url_replace(url, args, 'idList', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * move a card in another list ! 
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: id of the list the card should be moved to	   
 * @methodhttp PUT
 */
exports.moveCardList = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/idList';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Rename the card
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.renameCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/name';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Change the position of the card
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: A position. top, bottom, or a positive number.	   
 * @methodhttp PUT
 */
exports.changePostionCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/pos';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Subscribed to a card
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.subscribedToCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/subscribed';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Warn when upcoming a card
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.warnWhenUpcomingCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/warnWhenUpcoming';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * post a card
 * @category Card
 * @param {string} name  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [desc]  Valid Values: A user ID or name	   
 * @param {string} [pos]  Valid Values: A position. top, bottom, or a positive number.	   
 * @param {string} idList  Valid Values: id of the list that the card should be added to	   
 * @param {string} [idCardSource]  Valid Values: The id of the card to copy into a new card.	   
 * @param {string} [keepFromSource]  Valid Values: Properties of the card to copy over from the source.	   
 * @methodhttp POST
 */
exports.postCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards';
	args = args || {};
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'desc', 'str');
	url = url_replace(url, args, 'pos', 'str');
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'idCardSource', 'str');
	url = url_replace(url, args, 'keepFromSource', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * post a card action comment
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} text  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp POST
 */
exports.postCardActionComment = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/actions/comments';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'text', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * post a card attachment
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [file]  Valid Values: A file	   
 * @param {string} [url]  Valid Values: A URL starting with http:// or https:// or null	   
 * @param {string} [name]  Valid Values: a string with a length from 0 to 256	   
 * @param {string} [mimeType]  Valid Values: a string with a length from 0 to 256	   
 * @methodhttp POST
 */
exports.postCardAttachment = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/attachments';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'file', 'str');
	url = url_replace(url, args, 'url', 'str');
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'mimeType', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * post a card checklist !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [value]  Valid Values: The id of the checklist to add to the card, or null to create a new one.	   
 * @param {string} [name]  Valid Values: A user ID or name	   
 * @param {string} [idChecklistSource]  Valid Values: The id of the source checklist to copy into a new checklist.	   
 * @methodhttp POST
 */
exports.postCardChecklist = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/checklists';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str');
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'idChecklistSource', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * post a card labels !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: One of:	      green	      yellow	      orange	      red	      purple	      blue	   
 * @methodhttp POST
 */
exports.postCardLabels = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/labels';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * add a card member !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: The id of the member to add to the card	   
 * @methodhttp POST
 */
exports.addCardMember = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/members';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * add a card member voted !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} value  Valid Values: The id of the member to vote 'yes' on the card	   
 * @methodhttp POST
 */
exports.addCardMemberVoted = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/membersVoted';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete a card !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @methodhttp DELETE
 */
exports.deleteCard = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete a card action comment!	  Notes: This can only be done by the original author of the comment, or someone with higher permissions than the original author.
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} idAction  Valid Values: The id of the action.
 * @methodhttp DELETE
 */
exports.deleteCardActionComment = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/actions/{idAction}/comments';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idAction', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete a card attachment!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} idAttachment  Valid Values: The id of the attachment to remove from the card.
 * @methodhttp DELETE
 */
exports.deleteCardAttachment = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/attachments/{idAttachment}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idAttachment', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete a card checklist!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [idChecklist]  Valid Values: The id of the checklist to remove from the card
 * @methodhttp DELETE
 */
exports.deleteCardChecklist = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/checklists/{idChecklist}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idChecklist', 'str');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * delete a card label color!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [color]  Valid Values: One of:	  green	  yellow	  orange	  red	  purple	  blue
 * @methodhttp DELETE
 */
exports.deleteCardLabelColor = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/labels/{color}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'color', 'str');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete a card Member !
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [idMember]  Valid Values: The id of the member to remove from the card
 * @methodhttp DELETE
 */
exports.deleteCardMember = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/members/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idMember', 'str');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete a card Member voted!
 * @category Card
 * @param {string} card_id  the card id or shortlink!
 * @param {string} [idMember]  Valid Values: The id of the member whose vote to rescind
 * @methodhttp DELETE
 */
exports.deleteCardMemberVoted = function(args, opts) {
	var url = 'https://api.trello.com/1/cards/{card_id}/membersVoted/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'card_id', 'str', true);
	url = url_replace(url, args, 'idMember', 'str');
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * get a checklist !
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} [cards]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [checkItems]  Valid Values: One of:	      none	      all	   
 * @param {string} [checkItem_fields]  Valid Values: all or a comma-separated list of:	      name	      type	      pos	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      idBoard	   
 * @methodhttp GET
 */
exports.getChecklist = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'cards', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'checkItems', 'str');
	url = url_replace(url, args, 'checkItem_fields', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a checklist with field !
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} field  Valid Values: One of:	  name	  idBoard
 * @methodhttp GET
 */
exports.getChecklistWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/{field}';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a checklist Board!
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @methodhttp GET
 */
exports.getChecklistBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/board';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a checklist board with field !
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} field  Valid Values: One of:	  name	  desc	  closed	  idOrganization	  invited	  pinned	  url	  prefs	  invitations	  memberships	  subscribed	  labelNames
 * @methodhttp GET
 */
exports.getChecklistBoardWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/board/{field}';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a checklist card !
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [attachments]  Valid Values:	      true	      false	   
 * @param {string} [attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [members]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checkItemStates]  Valid Values:	      true	      false	   
 * @param {string} [checklists]  Valid Values: One of:	      none	      all	   
 * @param {string} [filter]  Valid Values: One of:	      none	      open	      closed	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getChecklistCard = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/cards';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'attachments', 'str');
	url = url_replace(url, args, 'attachment_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'checkItemStates', 'str');
	url = url_replace(url, args, 'checklists', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a checklist card with filter!
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} filter  Valid Values: One of:	  none	  open	  closed	  all
 * @methodhttp GET
 */
exports.getChecklistCardWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/cards/{filter}';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * get a checkItem!
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} [filter]  Valid Values: One of:	      none	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      type	      pos	   
 * @methodhttp GET
 */
exports.getChecklistCheckItem = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/checkItems';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * put a checklist!
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} [name]  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.putChecklist = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'name', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * rename checklist!
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} value  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.renameChecklist = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/name';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * create checklist!
 * @category CheckList
 * @param {string} value  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} idBoard  Valid Values: id of the board that the checklist should be added to	   
 * @param {string} [idChecklistSource]  Valid Values: The id of the source checklist to copy into a new checklist.	   
 * @methodhttp POST
 */
exports.createChecklist = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist';
	args = args || {};
	url = url_replace(url, args, 'value', 'str', true);
	url = url_replace(url, args, 'idBoard', 'str', true);
	url = url_replace(url, args, 'idChecklistSource', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * add a checkItem in the checklist!
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} name  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [pos]  Valid Values: A position. top, bottom, or a positive number.	   
 * @methodhttp POST
 */
exports.addChecklistCheckItems = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/checkItems';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'pos', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * delete a checkItem in the checklist!
 * @category CheckList
 * @param {string} idChecklist  the id of the checklist
 * @param {string} idCheckItem  Valid Values: the id of the check item to remove
 * @methodhttp DELETE
 */
exports.deleteChecklistCheckItems = function(args, opts) {
	var url = 'https://api.trello.com/1/checklist/{idChecklist}/checkItems/{idCheckItem}';
	args = args || {};
	url = url_replace(url, args, 'idChecklist', 'str', true);
	url = url_replace(url, args, 'idCheckItem', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list !
 * @category List
 * @param {string} idList  the list id !
 * @param {string} [cards]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @methodhttp GET
 */
exports.getList = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'cards', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list with field!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} field  Valid Values: One of:	  name	  closed	  idBoard	  pos	  subscribed
 * @methodhttp GET
 */
exports.getListWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/{field}';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list action!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} [entities]  Valid Values:	      true	      false	   
 * @param {string} [filter]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [format]  Valid Values: One of:	      count	      list	   
 * @param {string} [since]  Valid Values: A date, null or lastView	   
 * @param {string} [before]  Valid Values: A date or null	   
 * @param {string} [page]  Valid Values: a number from 0 to 100	   
 * @param {string} [idModels]  Valid Values: Only return actions related to these model ids	   
 * @methodhttp GET
 */
exports.getListAction = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/actions';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'entities', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'limit', 'str');
	url = url_replace(url, args, 'format', 'str');
	url = url_replace(url, args, 'since', 'str');
	url = url_replace(url, args, 'before', 'str');
	url = url_replace(url, args, 'page', 'str');
	url = url_replace(url, args, 'idModels', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list board!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @methodhttp GET
 */
exports.getListBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/board';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list board with field!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} field  Valid Values: One of:	  name	  desc	  closed	  idOrganization	  invited	  pinned	  url	  prefs	  invitations	  memberships	  subscribed	  labelNames
 * @methodhttp GET
 */
exports.getListBoardWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/board/{field}';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list card!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [attachments]  Valid Values:	      true	      false	   
 * @param {string} [attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [members]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checkItemStates]  Valid Values:	      true	      false	   
 * @param {string} [checklists]  Valid Values: One of:	      none	      all	   
 * @param {string} [filter]  Valid Values: One of:	      none	      open	      closed	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getListCard = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/board/cards';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'attachments', 'str');
	url = url_replace(url, args, 'attachment_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'checkItemStates', 'str');
	url = url_replace(url, args, 'checklists', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a list card with field!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} field  Valid Values: One of:	  none	  open	  closed	  all
 * @methodhttp GET
 */
exports.getListCarddWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/cards/{field}';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Put a list!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} [name]  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [closed]  Valid Values:	      true	      false	   
 * @param {string} [idBoard]  Valid Values: id of the board the list should be moved to	   
 * @param {string} [pos]  Valid Values: A position. top, bottom, or a positive number.	   
 * @param {string} [subscribed]  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.putList = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'closed', 'str');
	url = url_replace(url, args, 'idBoard', 'str');
	url = url_replace(url, args, 'pos', 'str');
	url = url_replace(url, args, 'subscribed', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Open or close list!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.closeList = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/closed';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Move a list on a new board!
 * @category List
 * @param {string} idList  the list id !
 * @param {string} value  Valid Values: id of the board the list should be moved to	   
 * @param {string} [pos]  Valid Values: position of the list on the new board	   
 * @methodhttp PUT
 */
exports.moveListInBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/idBoard';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	url = url_replace(url, args, 'pos', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Rename a list
 * @category List
 * @param {string} idList  the list id !
 * @param {string} value  Valid Values: a string with a length from 1 to 16384	   
 * @methodhttp PUT
 */
exports.renameList = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/name';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Move the position ao the list !
 * @category List
 * @param {string} idList  the list id !
 * @param {string} value  Valid Values: A position. top, bottom, or a positive number.	   
 * @methodhttp PUT
 */
exports.moveList = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/pos';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Subscribe to the list !
 * @category List
 * @param {string} idList  the list id !
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.subescribeList = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/subscribed';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Create a list
 * @category List
 * @param {string} name  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} idBoard  Valid Values: id of the board that the list should be added to	   
 * @param {string} [idListSource]  Valid Values: The id of the list to copy into a new list.	   
 * @param {string} [pos]  Valid Values: A position. top, bottom, or a positive number.	   
 * @methodhttp POST
 */
exports.createList = function(args, opts) {
	var url = 'https://api.trello.com/1/list';
	args = args || {};
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'idBoard', 'str', true);
	url = url_replace(url, args, 'idListSource', 'str');
	url = url_replace(url, args, 'pos', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Create a list card
 * @category List
 * @param {string} idList  the list id !
 * @param {string} name  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [desc]  Valid Values: A user ID or name	   
 * @methodhttp POST
 */
exports.createListCard = function(args, opts) {
	var url = 'https://api.trello.com/1/list/{idList}/cards';
	args = args || {};
	url = url_replace(url, args, 'idList', 'str', true);
	url = url_replace(url, args, 'name', 'str', true);
	url = url_replace(url, args, 'desc', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Get a member !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [cards]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [card_members]  Valid Values:	      true	      false	   
 * @param {string} [card_member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [card_attachments]  Valid Values:	      true	      false	   
 * @param {string} [card_attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [boards]  Valid Values: One of:	      none	      members	      organization	      public	      open	      closed	      pinned	      unpinned	      all	   
 * @param {string} [board_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [board_actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [board_actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [board_actions_format]  Valid Values: One of:	      count	      list	   
 * @param {string} [board_actions_since]  Valid Values: A date, null or lastView	   
 * @param {string} [board_actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [board_action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [board_lists]  Valid Values: One of:	      none	      open	      closed	      all	   
 * @param {string} [board_organization]  Valid Values:	      true	      false	   
 * @param {string} [board_organization_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [boardsInvited]  Valid Values: One of:	      none	      members	      organization	      public	      open	      closed	      pinned	      unpinned	      all	   
 * @param {string} [boardsInvited_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [organizations]  Valid Values: One of:	      none	      members	      public	      all	   
 * @param {string} [organization_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [organization_paid_account]  Valid Values:	      true	      false	   
 * @param {string} [organizationsInvited]  Valid Values:	      true	      false	   
 * @param {string} [organizationsInvited_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [notifications]  Valid Values: all or a comma-separated list of:	      addedAttachmentToCard	      addedToBoard	      addedToCard	      addedMemberToCard	      addAdminToBoard	      addAdminToOrganization	      changeCard	      closeBoard	      commentCard	      createdCard	      invitedToBoard	      invitedToOrganization	      removedFromBoard	      removedFromCard	      removedMemberFromCard	      removedFromOrganization	      mentionedOnCard	      updateCheckItemStateOnCard	      makeAdminOfBoard	      makeAdminOfOrganization	      cardDueSoon	   
 * @param {string} [notifications_entities]  Valid Values:	      true	      false	   
 * @param {string} [notifications_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [notification_fields]  Valid Values: all or a comma-separated list of:	      unread	      type	      date	      data	      idMemberCreator	   
 * @param {string} [notification_memberCreator]  Valid Values:	      true	      false	   
 * @param {string} [notification_memberCreator_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [tokens]  Valid Values: One of:	      none	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getMember = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'cards', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'card_members', 'str');
	url = url_replace(url, args, 'card_member_fields', 'str');
	url = url_replace(url, args, 'card_attachments', 'str');
	url = url_replace(url, args, 'card_attachment_fields', 'str');
	url = url_replace(url, args, 'boards', 'str');
	url = url_replace(url, args, 'board_fields', 'str');
	url = url_replace(url, args, 'board_actions', 'str');
	url = url_replace(url, args, 'board_actions_entities', 'str');
	url = url_replace(url, args, 'board_actions_format', 'str');
	url = url_replace(url, args, 'board_actions_since', 'str');
	url = url_replace(url, args, 'board_actions_limit', 'str');
	url = url_replace(url, args, 'board_action_fields', 'str');
	url = url_replace(url, args, 'board_lists', 'str');
	url = url_replace(url, args, 'board_organization', 'str');
	url = url_replace(url, args, 'board_organization_fields', 'str');
	url = url_replace(url, args, 'boardsInvited', 'str');
	url = url_replace(url, args, 'boardsInvited_fields', 'str');
	url = url_replace(url, args, 'organizations', 'str');
	url = url_replace(url, args, 'organization_fields', 'str');
	url = url_replace(url, args, 'organization_paid_account', 'str');
	url = url_replace(url, args, 'organizationsInvited', 'str');
	url = url_replace(url, args, 'organizationsInvited_fields', 'str');
	url = url_replace(url, args, 'notifications', 'str');
	url = url_replace(url, args, 'notifications_entities', 'str');
	url = url_replace(url, args, 'notifications_limit', 'str');
	url = url_replace(url, args, 'notification_fields', 'str');
	url = url_replace(url, args, 'notification_memberCreator', 'str');
	url = url_replace(url, args, 'notification_memberCreator_fields', 'str');
	url = url_replace(url, args, 'tokens', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member with field !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} field  Valid Values: One of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getMemberWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/{field}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member action !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [entities]  Valid Values:	      true	      false	   
 * @param {string} [filter]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [format]  Valid Values: One of:	      count	      list	   
 * @param {string} [since]  Valid Values: A date, null or lastView	   
 * @param {string} [before]  Valid Values: A date or null	   
 * @param {string} [page]  Valid Values: a number from 0 to 100	   
 * @param {string} [idModels]  Valid Values: Only return actions related to these model ids	   
 * @methodhttp GET
 */
exports.getMemberAction = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/actions';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'entities', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'limit', 'str');
	url = url_replace(url, args, 'format', 'str');
	url = url_replace(url, args, 'since', 'str');
	url = url_replace(url, args, 'before', 'str');
	url = url_replace(url, args, 'page', 'str');
	url = url_replace(url, args, 'idModels', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member board !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [filter]  Valid Values: One of:	      none	      members	      organization	      public	      open	      closed	      pinned	      unpinned	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [actions_format]  Valid Values: One of:	      count	      list	   
 * @param {string} [actions_since]  Valid Values: A date, null or lastView	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [organization]  Valid Values:	      true	      false	   
 * @param {string} [organization_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [lists]  Valid Values: One of:	      none	      open	      closed	      all	   
 * @methodhttp GET
 */
exports.getMemberBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/boards';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'actions_format', 'str');
	url = url_replace(url, args, 'actions_since', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'organization', 'str');
	url = url_replace(url, args, 'organization_fields', 'str');
	url = url_replace(url, args, 'lists', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member board with filter !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} filter  Valid Values: One of:	  none	  members	  organization	  public	  open	  closed	  pinned	  unpinned	  all
 * @methodhttp GET
 */
exports.getMemberBoardWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/boards/{filter}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member board with filter !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @methodhttp GET
 */
exports.getMemberBoardInvited = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/boardsInvited';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member boardInvited with field !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  name	  desc	  closed	  idOrganization	  invited	  pinned	  url	  prefs	  invitations	  memberships	  subscribed	  labelNames
 * @methodhttp GET
 */
exports.getMemberBoardInvitedWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/boardsInvited/{field}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member card !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [attachments]  Valid Values:	      true	      false	   
 * @param {string} [attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [members]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checkItemStates]  Valid Values:	      true	      false	   
 * @param {string} [checklists]  Valid Values: One of:	      none	      all	   
 * @param {string} [filter]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getMemberCard = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/cards';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'attachments', 'str');
	url = url_replace(url, args, 'attachment_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'checkItemStates', 'str');
	url = url_replace(url, args, 'checklists', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member card with filter !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} filter  Valid Values: One of:	  none	  visible	  open	  closed	  all
 * @methodhttp GET
 */
exports.getMemberCardWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/cards/{filter}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member notification !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [entities]  Valid Values:	      true	      false	   
 * @param {string} [filter]  Valid Values: all or a comma-separated list of:	      addedAttachmentToCard	      addedToBoard	      addedToCard	      addedMemberToCard	      addAdminToBoard	      addAdminToOrganization	      changeCard	      closeBoard	      commentCard	      createdCard	      invitedToBoard	      invitedToOrganization	      removedFromBoard	      removedFromCard	      removedMemberFromCard	      removedFromOrganization	      mentionedOnCard	      updateCheckItemStateOnCard	      makeAdminOfBoard	      makeAdminOfOrganization	      cardDueSoon	   
 * @param {string} [read_filter]  Valid Values: One of:	      read	      unread	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      unread	      type	      date	      data	      idMemberCreator	   
 * @param {string} [limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [page]  Valid Values: a number from 0 to 100	   
 * @param {string} [before]  Valid Values: An id, or null	   
 * @param {string} [since]  Valid Values: An id, or null	   
 * @param {string} [memberCreator]  Valid Values:	      true	      false	   
 * @param {string} [memberCreator_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @methodhttp GET
 */
exports.getMemberNotifications = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/notifications';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'entities', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'read_filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'limit', 'str');
	url = url_replace(url, args, 'page', 'str');
	url = url_replace(url, args, 'before', 'str');
	url = url_replace(url, args, 'since', 'str');
	url = url_replace(url, args, 'memberCreator', 'str');
	url = url_replace(url, args, 'memberCreator_fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member notification with filter !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} filter  Valid Values: all or a comma-separated list of:	  addedAttachmentToCard	  addedToBoard	  addedToCard	  addedMemberToCard	  addAdminToBoard	  addAdminToOrganization	  changeCard	  closeBoard	  commentCard	  createdCard	  invitedToBoard	  invitedToOrganization	  removedFromBoard	  removedFromCard	  removedMemberFromCard	  removedFromOrganization	  mentionedOnCard	  updateCheckItemStateOnCard	  makeAdminOfBoard	  makeAdminOfOrganization	  cardDueSoon
 * @methodhttp GET
 */
exports.getMemberNotificationWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/notifications/{filter}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member organization !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [filter]  Valid Values: One of:	      none	      members	      public	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [paid_account]  Valid Values:	      true	      false	   
 * @methodhttp GET
 */
exports.getMemberOrganizations = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/organizations';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'paid_account', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member organization with filter !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [filter]  Valid Values: One of:	  none	  members	  public	  all
 * @methodhttp GET
 */
exports.getMemberOrganizationWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/organizations/{filter}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member organizationInvited !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @methodhttp GET
 */
exports.getMemberOrganizationInvited = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/organizationsInvited';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member organizationInvited with field !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  name	  displayName	  desc	  idBoards	  invited	  invitations	  memberships	  prefs	  powerUps	  url	  website	  logoHash
 * @methodhttp GET
 */
exports.getMemberOrganizationInvitedWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/organizationsInvited/{field}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a member token !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [filter]  Valid Values: One of:	      none	      all	   
 * @methodhttp GET
 */
exports.getMemberToken = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/tokens';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Put a member !
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} [fullName]  Valid Values: A string with a length of at least 4. Cannot begin or end with a space.	   
 * @param {string} [initials]  Valid Values: A string with a length from 1 to 4. Cannot begin or end with a space	   
 * @param {string} [bio]  Valid Values: A user ID or name	   
 * @methodhttp PUT
 */
exports.putMember = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'fullName', 'str');
	url = url_replace(url, args, 'initials', 'str');
	url = url_replace(url, args, 'bio', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put a member bio!
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} value  Valid Values: A user ID or name	   
 * @methodhttp PUT
 */
exports.putMemberBio = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/bio';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put a member FullName!
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} value  Valid Values: A string with a length of at least 4. Cannot begin or end with a space.	   
 * @methodhttp PUT
 */
exports.putMemberFullName = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/fullName';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put a member Initials!
 * @category Member
 * @param {string} idMember  The id Member or Username !
 * @param {string} value  Valid Values: A string with a length from 1 to 4. Cannot begin or end with a space	   
 * @methodhttp PUT
 */
exports.putMemberInitials = function(args, opts) {
	var url = 'https://api.trello.com/1/members/{idMember}/initials';
	args = args || {};
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Get a notification !
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} [entities]  Valid Values:	      true	      false	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      unread	      type	      date	      data	      idMemberCreator	   
 * @param {string} [memberCreator]  Valid Values:	      true	      false	   
 * @param {string} [memberCreator_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [board]  Valid Values:	      true	      false	   
 * @param {string} [board_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [list]  Valid Values:	      true	      false	   
 * @param {string} [card]  Valid Values:	      true	      false	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [organization]  Valid Values:	      true	      false	   
 * @param {string} [organization_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [member]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @methodhttp GET
 */
exports.getNotification = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'entities', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'memberCreator', 'str');
	url = url_replace(url, args, 'memberCreator_fields', 'str');
	url = url_replace(url, args, 'board', 'str');
	url = url_replace(url, args, 'board_fields', 'str');
	url = url_replace(url, args, 'list', 'str');
	url = url_replace(url, args, 'card', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'organization', 'str');
	url = url_replace(url, args, 'organization_fields', 'str');
	url = url_replace(url, args, 'member', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification with field!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} field  Valid Values: One of:	  unread	  type	  date	  data	  idMemberCreator
 * @methodhttp GET
 */
exports.getNotificationWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/{field}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the notification board!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @methodhttp GET
 */
exports.getNotificationBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/board';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification board with field!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  name	  desc	  closed	  idOrganization	  invited	  pinned	  url	  prefs	  invitations	  memberships	  subscribed	  labelNames
 * @methodhttp GET
 */
exports.getNotificationBoardWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/board/{field}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get the notification card!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getNotificationCard = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/card';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification card with field!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} field  Valid Values: One of:	  badges	  checkItemStates	  closed	  desc	  due	  idBoard	  idChecklists	  idList	  idMembers	  idShort	  idAttachmentCover	  manualCoverAttachment	  labels	  name	  pos	  subscribed	  url
 * @methodhttp GET
 */
exports.getNotificationCardWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/card/{field}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification entities!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @methodhttp GET
 */
exports.getNotificationEntities = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/entities';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification list!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @methodhttp GET
 */
exports.getNotificationList = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/list';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification list with field!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} field  Valid Values: One of:	  name	  closed	  idBoard	  pos	  subscribed
 * @methodhttp GET
 */
exports.getNotificationListWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/list/{field}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification member!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getNotificationMember = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/member';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification member with field!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getNotificationMemberWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/member/{field}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification memberCreator!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getNotificationMemberCreator = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/memberCreator';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification member creator with field!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} field  Valid Values: One of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getNotificationMemberCreatorWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/memberCreator/{field}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification organization!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @methodhttp GET
 */
exports.getNotificationOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/organization';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a notification member organization with field!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @param {string} field  Valid Values: One of:	  name	  displayName	  desc	  idBoards	  invited	  invitations	  memberships	  prefs	  powerUps	  url	  website	  logoHash
 * @methodhttp GET
 */
exports.getNotificationOrganizationWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/organization/{field}';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Put a notification!
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @methodhttp PUT
 */
exports.putNotification = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put a notification unread !
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @methodhttp PUT
 */
exports.putNotificationUnread = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/{idNotification}/unread';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Post a notification all read !
 * @category Notification
 * @param {string} idNotification  The id of the notification !
 * @methodhttp POST
 */
exports.posttNotificationRead = function(args, opts) {
	var url = 'https://api.trello.com/1/notifications/all/read';
	args = args || {};
	url = url_replace(url, args, 'idNotification', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Get a organization !
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [members]  Valid Values: One of:	      none	      normal	      admins	      owners	      all	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [member_activity]  Valid Values: true or false; works for premium organizations only.	   
 * @param {string} [membersInvited]  Valid Values: One of:	      none	      normal	      admins	      owners	      all	   
 * @param {string} [membersInvited_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [boards]  Valid Values: One of:	      none	      members	      organization	      public	      open	      closed	      pinned	      unpinned	      all	   
 * @param {string} [board_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [board_actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [board_actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [board_actions_format]  Valid Values: One of:	      count	      list	   
 * @param {string} [board_actions_since]  Valid Values: A date, null or lastView	   
 * @param {string} [board_actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [board_action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [board_lists]  Valid Values: One of:	      none	      open	      closed	      all	   
 * @param {string} [paid_account]  Valid Values:	      true	      false	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @methodhttp GET
 */
exports.getOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'member_activity', 'str');
	url = url_replace(url, args, 'membersInvited', 'str');
	url = url_replace(url, args, 'membersInvited_fields', 'str');
	url = url_replace(url, args, 'boards', 'str');
	url = url_replace(url, args, 'board_fields', 'str');
	url = url_replace(url, args, 'board_actions', 'str');
	url = url_replace(url, args, 'board_actions_entities', 'str');
	url = url_replace(url, args, 'board_actions_format', 'str');
	url = url_replace(url, args, 'board_actions_since', 'str');
	url = url_replace(url, args, 'board_actions_limit', 'str');
	url = url_replace(url, args, 'board_action_fields', 'str');
	url = url_replace(url, args, 'board_lists', 'str');
	url = url_replace(url, args, 'paid_account', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization with field!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} field  Valid Values: One of:	  name	  displayName	  desc	  idBoards	  invited	  invitations	  memberships	  prefs	  powerUps	  url	  website	  logoHash
 * @methodhttp GET
 */
exports.getOrganizationWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/{field}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization action!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [entities]  Valid Values:	      true	      false	   
 * @param {string} [filter]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [format]  Valid Values: One of:	      count	      list	   
 * @param {string} [since]  Valid Values: A date, null or lastView	   
 * @param {string} [before]  Valid Values: A date or null	   
 * @param {string} [page]  Valid Values: a number from 0 to 100	   
 * @param {string} [idModels]  Valid Values: Only return actions related to these model ids	   
 * @methodhttp GET
 */
exports.getOrganizationAction = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/actions';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'entities', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'limit', 'str');
	url = url_replace(url, args, 'format', 'str');
	url = url_replace(url, args, 'since', 'str');
	url = url_replace(url, args, 'before', 'str');
	url = url_replace(url, args, 'page', 'str');
	url = url_replace(url, args, 'idModels', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization board!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [filter]  Valid Values: One of:	      none	      members	      organization	      public	      open	      closed	      pinned	      unpinned	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [actions_format]  Valid Values: One of:	      count	      list	   
 * @param {string} [actions_since]  Valid Values: A date, null or lastView	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [organization]  Valid Values:	      true	      false	   
 * @param {string} [organization_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [lists]  Valid Values: One of:	      none	      open	      closed	      all	   
 * @methodhttp GET
 */
exports.getOrganizationBoard = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/boards';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'actions_format', 'str');
	url = url_replace(url, args, 'actions_since', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'organization', 'str');
	url = url_replace(url, args, 'organization_fields', 'str');
	url = url_replace(url, args, 'lists', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization board with filter!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} filter  Valid Values: One of:	  none	  members	  organization	  public	  open	  closed	  pinned	  unpinned	  all
 * @methodhttp GET
 */
exports.getOrganizationBoardWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/boards/{filter}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization members!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [filter]  Valid Values: One of:	      none	      normal	      admins	      owners	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [activity]  Valid Values: true or false; works for premium organizations only.	   
 * @methodhttp GET
 */
exports.getOrganizationMembers = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/members';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	url = url_replace(url, args, 'activity', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization members with filter!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} filter  Valid Values: One of:	  none	  normal	  admins	  owners	  all
 * @methodhttp GET
 */
exports.getOrganizationMembersWithFilter = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/members/{filter}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'filter', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization member card!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @param {string} [actions]  Valid Values: all or a comma-separated list of:	      addAttachmentToCard	      addChecklistToCard	      addMemberToBoard	      addMemberToCard	      addMemberToOrganization	      addToOrganizationBoard	      commentCard	      copyCommentCard	      convertToCardFromCheckItem	      copyBoard	      createBoard	      createCard	      copyCard	      createList	      createOrganization	      deleteAttachmentFromCard	      deleteBoardInvitation	      deleteOrganizationInvitation	      makeAdminOfBoard	      makeNormalMemberOfBoard	      makeNormalMemberOfOrganization	      makeObserverOfBoard	      memberJoinedTrello	      moveCardFromBoard	      moveListFromBoard	      moveCardToBoard	      moveListToBoard	      removeAdminFromBoard	      removeAdminFromOrganization	      removeChecklistFromCard	      removeFromOrganizationBoard	      removeMemberFromCard	      updateBoard	      updateCard	      updateCheckItemStateOnCard	      updateChecklist	      updateMember	      updateOrganization	      updateCard:idList	      updateCard:closed	      updateCard:desc	      updateCard:name	   
 * @param {string} [attachments]  Valid Values:	      true	      false	   
 * @param {string} [attachment_fields]  Valid Values: all or a comma-separated list of:	      bytes	      date	      idMember	      isUpload	      mimeType	      name	      previews	      url	   
 * @param {string} [members]  Valid Values:	      true	      false	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [checkItemStates]  Valid Values:	      true	      false	   
 * @param {string} [checklists]  Valid Values: One of:	      none	      all	   
 * @param {string} [board]  Valid Values:	      true	      false	   
 * @param {string} [board_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [list]  Valid Values:	      true	      false	   
 * @param {string} [list_fields]  Valid Values: all or a comma-separated list of:	      name	      closed	      idBoard	      pos	      subscribed	   
 * @param {string} [filter]  Valid Values: One of:	      none	      visible	      open	      closed	      all	   
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @methodhttp GET
 */
exports.getOrganizationMemberCard = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/members/{idMember}/cards';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'actions', 'str');
	url = url_replace(url, args, 'attachments', 'str');
	url = url_replace(url, args, 'attachment_fields', 'str');
	url = url_replace(url, args, 'members', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'checkItemStates', 'str');
	url = url_replace(url, args, 'checklists', 'str');
	url = url_replace(url, args, 'board', 'str');
	url = url_replace(url, args, 'board_fields', 'str');
	url = url_replace(url, args, 'list', 'str');
	url = url_replace(url, args, 'list_fields', 'str');
	url = url_replace(url, args, 'filter', 'str');
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization membersInvited!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getOrganizationMembersInvited = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/membersInvited';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a organization membersInvited with field!
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [field]  Valid Values: all or a comma-separated list of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getOrganizationMembersInvitedWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/membersInvited/{field}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'field', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Put an organisation
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [prefs/orgInviteRestrict]  Valid Values: An email address with optional expansion tokens	   
 * @param {string} [prefs/externalMembersDisabled]  Valid Values:	      true	      false	   
 * @param {string} [prefs/boardVisibilityRestrict/private]  Valid Values: One of:	      none	      admin	      org	   
 * @param {string} [prefs/boardVisibilityRestrict/org]  Valid Values: One of:	      none	      admin	      org	   
 * @param {string} [prefs/boardVisibilityRestrict/public]  Valid Values: One of:	      none	      admin	      org	   
 * @param {string} [name]  Valid Values: A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. Must be unique.	   
 * @param {string} [displayName]  Valid Values: A string with a length of at least 1. Cannot begin or end with a space.	   
 * @param {string} [desc]  Valid Values: A user ID or name	   
 * @param {string} [website]  Valid Values: A URL starting with http:// or https:// or null	   
 * @param {string} [prefs/permissionLevel]  Valid Values: One of:	      private	      public	   
 * @methodhttp PUT
 */
exports.putOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'prefs/orgInviteRestrict', 'str');
	url = url_replace(url, args, 'prefs/externalMembersDisabled', 'str');
	url = url_replace(url, args, 'prefs/boardVisibilityRestrict/private', 'str');
	url = url_replace(url, args, 'prefs/boardVisibilityRestrict/org', 'str');
	url = url_replace(url, args, 'prefs/boardVisibilityRestrict/public', 'str');
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'displayName', 'str');
	url = url_replace(url, args, 'desc', 'str');
	url = url_replace(url, args, 'website', 'str');
	url = url_replace(url, args, 'prefs/permissionLevel', 'str');
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put an organisation desc
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: A user ID or name	   
 * @methodhttp PUT
 */
exports.putOrganizationDesc = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/desc';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Put an organisation displayname
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: A string with a length of at least 1. Cannot begin or end with a space.	   
 * @methodhttp PUT
 */
exports.putOrganizationDisplayName = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/displayName';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Add a member to the organization
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @param {string} type  Valid Values: One of:	      normal	      observer	      admin	   
 * @methodhttp PUT
 */
exports.addOrganizationMember = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/members/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'type', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Deactivated a member to the organization
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.deactivatedOrganizationMember = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/members/{idMember}/deactivated';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * rename an organization !
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. Must be unique.	   
 * @methodhttp PUT
 */
exports.renameOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/name';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * put a board visibility restriction to an organazition
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: One of:	      none	      admin	      org	   
 * @methodhttp PUT
 */
exports.putOrganizationBoardVisibilityRestrict = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/prefs/boardVisibilityRestrict/org';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * put a board visibility private restriction to an organazition
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: One of:	      none	      admin	      org	   
 * @methodhttp PUT
 */
exports.putOrganizationBoardVisibilityRestrictPrivate = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/prefs/boardVisibilityRestrict/private';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * put a board visibility public restriction to an organazition
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: One of:	      none	      admin	      org	   
 * @methodhttp PUT
 */
exports.putOrganizationBoardVisibilityRestrictPublic = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/prefs/boardVisibilityRestrict/public';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Enable or disable external members on an organisation
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values:	      true	      false	   
 * @methodhttp PUT
 */
exports.setOrganisationMemberDisabled = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/prefs/externalMembersDisabled';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Set the restriction invitation to an organisation
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: An email address with optional expansion tokens	   
 * @methodhttp PUT
 */
exports.setOrganisationInviteRestrict = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/prefs/orgInviteRestrict';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Set the permission level to an organisation
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: One of:	      private	      public	   
 * @methodhttp PUT
 */
exports.setOrganisationPermissionLevel = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/prefs/permissionLevel';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * put the organization website
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: A URL starting with http:// or https:// or null	   
 * @methodhttp PUT
 */
exports.putOrganisationWebsite = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/website';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Create an organization !
 * @category Organization
 * @param {string} [name]  Valid Values: A user ID or name	   
 * @param {string} [displayName]  Valid Values: A string with a length of at least 1. Cannot begin or end with a space.	   
 * @param {string} [desc]  Valid Values: A user ID or name	   
 * @param {string} [website]  Valid Values: A URL starting with http:// or https:// or null	   
 * @methodhttp POST
 */
exports.createOrganisation = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations';
	args = args || {};
	url = url_replace(url, args, 'name', 'str');
	url = url_replace(url, args, 'displayName', 'str');
	url = url_replace(url, args, 'desc', 'str');
	url = url_replace(url, args, 'website', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * send invitation to an organization
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} [idMember]  Valid Values: A user ID or name	   
 * @param {string} [email]  Valid Values: An email address	   
 * @param {string} [type]  Valid Values: One of:	      normal	      observer	      admin	   
 * @methodhttp POST
 */
exports.sendOrganisationInvitation = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/invitations';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'idMember', 'str');
	url = url_replace(url, args, 'email', 'str');
	url = url_replace(url, args, 'type', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * response to an organization invitation
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} response  Valid Values: One of:	  accept	  reject
 * @param {string} [invitationTokens]  Valid Values: A comma-separated list of unique identifier tokens	   
 * @methodhttp POST
 */
exports.responseOrganisationInvitation = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/invitations/{response}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'response', 'str', true);
	url = url_replace(url, args, 'invitationTokens', 'str');
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Post an organization logo
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} file  Valid Values: A file	   
 * @methodhttp POST
 */
exports.postOrganisationLogo = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/logo';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'file', 'str', true);
	return http.post({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete organization
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @methodhttp DELETE
 */
exports.deleteOrganization = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete organization invitation
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} idInvitation  Valid Values: The ID of an invitation
 * @methodhttp DELETE
 */
exports.deleteOrganizationInvitation = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/invitations/{idInvitation}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'idInvitation', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete organization logo
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @methodhttp DELETE
 */
exports.deleteOrganizationLogo = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/logo';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete organization Member
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @methodhttp DELETE
 */
exports.deleteOrganizationMember = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/members/{idMember}';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete all organization Member
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} idMember  Valid Values: A board id, organization id, or organization name
 * @methodhttp DELETE
 */
exports.deleteOrganizationAllMember = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/members/{idMember}/all';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'idMember', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete the invite resctriction in an organization !
 * @category Organization
 * @param {string} idOrg  The id of the Organization !
 * @param {string} value  Valid Values: An email address with optional expansion tokens	   
 * @methodhttp DELETE
 */
exports.deleteOrganizationInviteRestrict = function(args, opts) {
	var url = 'https://api.trello.com/1/organizations/{idOrg}/prefs/orgInviteRestrict';
	args = args || {};
	url = url_replace(url, args, 'idOrg', 'str', true);
	url = url_replace(url, args, 'value', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Delete the invite resctriction in an organization !
 * @category Search
 * @param {string} query  Valid Values: a string with a length from 1 to 16384	   
 * @param {string} [idBoards]  Valid Values: A comma-separated list of objectIds, 24-character hex strings	   
 * @param {string} idOrganizations  Valid Values: A comma-separated list of objectIds, 24-character hex strings	   
 * @param {string} [idCards]  Valid Values: A comma-separated list of objectIds, 24-character hex strings	   
 * @param {string} [modelTypes]  Valid Values: all or a comma-separated list of:	      actions	      cards	      boards	      organizations	      members	   
 * @param {string} [board_fields]  Valid Values: all or a comma-separated list of:	      name	      desc	      closed	      idOrganization	      invited	      pinned	      url	      prefs	      invitations	      memberships	      subscribed	      labelNames	   
 * @param {string} [boards_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [card_fields]  Valid Values: all or a comma-separated list of:	      badges	      checkItemStates	      closed	      desc	      due	      idBoard	      idChecklists	      idList	      idMembers	      idShort	      idAttachmentCover	      manualCoverAttachment	      labels	      name	      pos	      subscribed	      url	   
 * @param {string} [cards_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [card_board]  Valid Values:	      true	      false	   
 * @param {string} [card_list]  Valid Values:	      true	      false	   
 * @param {string} [card_members]  Valid Values:	      true	      false	   
 * @param {string} [organization_fields]  Valid Values: all or a comma-separated list of:	      name	      displayName	      desc	      idBoards	      invited	      invitations	      memberships	      prefs	      powerUps	      url	      website	      logoHash	   
 * @param {string} [organizations_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [member_fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	   
 * @param {string} [members_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [action_fields]  Valid Values: all or a comma-separated list of:	      idMemberCreator	      data	      type	      date	   
 * @param {string} [actions_entities]  Valid Values:	      true	      false	   
 * @param {string} [actions_limit]  Valid Values: a number from 1 to 1000	   
 * @param {string} [actions_since]  Valid Values: A date, a number of days, or null	   
 * @param {string} [partial]  Valid Values:	      true	      false	   
 * @methodhttp GET
 */
exports.search = function(args, opts) {
	var url = 'https://api.trello.com/1/search';
	args = args || {};
	url = url_replace(url, args, 'query', 'str', true);
	url = url_replace(url, args, 'idBoards', 'str');
	url = url_replace(url, args, 'idOrganizations', 'str', true);
	url = url_replace(url, args, 'idCards', 'str');
	url = url_replace(url, args, 'modelTypes', 'str');
	url = url_replace(url, args, 'board_fields', 'str');
	url = url_replace(url, args, 'boards_limit', 'str');
	url = url_replace(url, args, 'card_fields', 'str');
	url = url_replace(url, args, 'cards_limit', 'str');
	url = url_replace(url, args, 'card_board', 'str');
	url = url_replace(url, args, 'card_list', 'str');
	url = url_replace(url, args, 'card_members', 'str');
	url = url_replace(url, args, 'organization_fields', 'str');
	url = url_replace(url, args, 'organizations_limit', 'str');
	url = url_replace(url, args, 'member_fields', 'str');
	url = url_replace(url, args, 'members_limit', 'str');
	url = url_replace(url, args, 'action_fields', 'str');
	url = url_replace(url, args, 'actions_entities', 'str');
	url = url_replace(url, args, 'actions_limit', 'str');
	url = url_replace(url, args, 'actions_since', 'str');
	url = url_replace(url, args, 'partial', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a token !
 * @category Token
 * @param {string} token  The token ID !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      identifier	      idMember	      dateCreated	      dateExpires	      permissions	   
 * @methodhttp GET
 */
exports.getToken = function(args, opts) {
	var url = 'https://api.trello.com/1/tokens/{token}';
	args = args || {};
	url = url_replace(url, args, 'token', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a token  with field!
 * @category Token
 * @param {string} token  The token ID !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  identifier	  idMember	  dateCreated	  dateExpires	  permissions
 * @methodhttp GET
 */
exports.getTokenWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/tokens/{token}/{field}';
	args = args || {};
	url = url_replace(url, args, 'token', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a token member!
 * @category Token
 * @param {string} token  The token ID !
 * @param {string} [fields]  Valid Values: all or a comma-separated list of:	      avatarHash	      bio	      fullName	      initials	      status	      url	      username	      avatarSource	      confirmed	      email	      gravatarHash	      idBoards	      idBoardsInvited	      idBoardsPinned	      idOrganizations	      idOrganizationsInvited	      idPremOrgsAdmin	      loginTypes	      prefs	      status	      trophies	      uploadedAvatarHash	   
 * @methodhttp GET
 */
exports.getToken = function(args, opts) {
	var url = 'https://api.trello.com/1/tokens/{token}/member';
	args = args || {};
	url = url_replace(url, args, 'token', 'str', true);
	url = url_replace(url, args, 'fields', 'str');
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Get a token member  with field!
 * @category Token
 * @param {string} token  The token ID !
 * @param {string} field  Valid Values: all or a comma-separated list of:	  avatarHash	  bio	  fullName	  initials	  status	  url	  username	  avatarSource	  confirmed	  email	  gravatarHash	  idBoards	  idBoardsInvited	  idBoardsPinned	  idOrganizations	  idOrganizationsInvited	  idPremOrgsAdmin	  loginTypes	  prefs	  status	  trophies	  uploadedAvatarHash
 * @methodhttp GET
 */
exports.getTokenMemberWithField = function(args, opts) {
	var url = 'https://api.trello.com/1/tokens/{token}/member/{field}';
	args = args || {};
	url = url_replace(url, args, 'token', 'str', true);
	url = url_replace(url, args, 'field', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};

/** 
 * Delete a token !
 * @category Token
 * @param {string} token  The token ID !
 * @methodhttp DELETE
 */
exports.deleteToken = function(args, opts) {
	var url = 'https://api.trello.com/1/tokens/{token}';
	args = args || {};
	url = url_replace(url, args, 'token', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'oauth'}, opts);
};

/** 
 * Get a type !
 * @category Type
 * @param {string} id  The type ID !
 * @methodhttp GET
 */
exports.getType = function(args, opts) {
	var url = 'https://api.trello.com/1/types/{id}';
	args = args || {};
	url = url_replace(url, args, 'id', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'none'}, opts);
};
({
	auth:function(){auth({provider:'github'})},
	'gistListUser': function(args, opts) {
		var url = 'users/{user}/gists'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'gistList': function(args, opts) {
		var url = 'gists'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'gistListPublic': function(args, opts) {
		var url = 'gists/public'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'gistListStarred': function(args, opts) {
		var url = 'gists/starred'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'gistGet': function(args, opts) {
		var url = 'gists/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'gistEdit': function(args, opts) {
		var url = 'gists/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (args['public'] == null) throw new Error('public is a required parameter')
		var rgx = new RegExp('\{public\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['public'])
			if (args['public']) delete args['public']
		}
		if (args['files'] == null) throw new Error('files is a required parameter')
		var rgx = new RegExp('\{files\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['files'])
			if (args['files']) delete args['files']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'gistDelete': function(args, opts) {
		var url = 'gists/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'gistCreate': function(args, opts) {
		var url = 'gists'
		args = args || {}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (args['public'] == null) throw new Error('public is a required parameter')
		var rgx = new RegExp('\{public\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['public'])
			if (args['public']) delete args['public']
		}
		if (args['files'] == null) throw new Error('files is a required parameter')
		var rgx = new RegExp('\{files\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['files'])
			if (args['files']) delete args['files']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'gistStarred': function(args, opts) {
		var url = 'gists/{id}/star'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'gistStar': function(args, opts) {
		var url = 'gists/{id}/star'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'gistUnstar': function(args, opts) {
		var url = 'gists/{id}/star'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'gistFork': function(args, opts) {
		var url = 'gists/{id}/fork'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'gistListComments': function(args, opts) {
		var url = 'gists/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'gistPostComment': function(args, opts) {
		var url = 'gists/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'gistGetComment': function(args, opts) {
		var url = 'gists/comments/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'gistEditComment': function(args, opts) {
		var url = 'gists/comments/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'gistDeleteComment': function(args, opts) {
		var url = 'gists/comments/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'getBlob': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/blobs/{sha}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createBlob': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/blobs'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['content'] == null) throw new Error('content is a required parameter')
		var rgx = new RegExp('\{content\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content'])
			if (args['content']) delete args['content']
		}
		if (args['encoding'] == null) args['encoding'] = "utf-8"
		var rgx = new RegExp('\{encoding\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['encoding'])
			if (args['encoding']) delete args['encoding']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getCommit': function(args, opts) {
		var url = 'repos/{user}/{repo}/commits/{sha}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createBlob': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/commits'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (args['tree'] == null) throw new Error('tree is a required parameter')
		var rgx = new RegExp('\{tree\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tree'])
			if (args['tree']) delete args['tree']
		}
		var rgx = new RegExp('\{parents\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['parents'])
			if (args['parents']) delete args['parents']
		}
		var rgx = new RegExp('\{author.name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author.name'])
			if (args['author.name']) delete args['author.name']
		}
		var rgx = new RegExp('\{author.email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author.email'])
			if (args['author.email']) delete args['author.email']
		}
		var rgx = new RegExp('\{author.date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author.date'])
			if (args['author.date']) delete args['author.date']
		}
		var rgx = new RegExp('\{committer.name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['committer.name'])
			if (args['committer.name']) delete args['committer.name']
		}
		var rgx = new RegExp('\{committer.email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['committer.email'])
			if (args['committer.email']) delete args['committer.email']
		}
		var rgx = new RegExp('\{committer.date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['committer.date'])
			if (args['committer.date']) delete args['committer.date']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/refs/{ref}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['ref'] == null) throw new Error('ref is a required parameter')
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getSubReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/refs/{ref}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['ref'] == null) throw new Error('ref is a required parameter')
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'updateReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/refs/{ref}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['ref'] == null) throw new Error('ref is a required parameter')
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		var rgx = new RegExp('\{force\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['force'])
			if (args['force']) delete args['force']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/refs/{ref}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['ref'] == null) throw new Error('ref is a required parameter')
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listReferences': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/refs'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/refs'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['ref'] == null) throw new Error('ref is a required parameter')
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/tags/{sha}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/tags'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (args['object'] == null) throw new Error('object is a required parameter')
		var rgx = new RegExp('\{object\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['object'])
			if (args['object']) delete args['object']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tagger.name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagger.name'])
			if (args['tagger.name']) delete args['tagger.name']
		}
		var rgx = new RegExp('\{tagger.email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagger.email'])
			if (args['tagger.email']) delete args['tagger.email']
		}
		var rgx = new RegExp('\{tagger.date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagger.date'])
			if (args['tagger.date']) delete args['tagger.date']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/trees/{sha}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getReference': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/trees/{sha}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		var rgx = new RegExp('\{recursive\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['recursive'])
			if (args['recursive']) delete args['recursive']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createTree': function(args, opts) {
		var url = 'repos/{user}/{repo}/git/trees'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		var rgx = new RegExp('\{base_tree\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base_tree'])
			if (args['base_tree']) delete args['base_tree']
		}
		if (args['tree.path'] == null) throw new Error('tree.path is a required parameter')
		var rgx = new RegExp('\{tree.path\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tree.path'])
			if (args['tree.path']) delete args['tree.path']
		}
		if (args['tree.mode'] == null) throw new Error('tree.mode is a required parameter')
		var rgx = new RegExp('\{tree.mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tree.mode'])
			if (args['tree.mode']) delete args['tree.mode']
		}
		if (args['tree.type'] == null) throw new Error('tree.type is a required parameter')
		var rgx = new RegExp('\{tree.type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tree.type'])
			if (args['tree.type']) delete args['tree.type']
		}
		var rgx = new RegExp('\{tree.sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tree.sha'])
			if (args['tree.sha']) delete args['tree.sha']
		}
		var rgx = new RegExp('\{tree.content\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tree.content'])
			if (args['tree.content']) delete args['tree.content']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'listIssues': function(args, opts) {
		var url = 'issues'
		args = args || {}
		if (args['filter'] == null) args['filter'] = "assigned"
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (args['state'] == null) args['state'] = "open"
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		var rgx = new RegExp('\{labels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['labels'])
			if (args['labels']) delete args['labels']
		}
		if (args['sort'] == null) args['sort'] = "created"
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['direction'] == null) args['direction'] = "desc"
		var rgx = new RegExp('\{direction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['direction'])
			if (args['direction']) delete args['direction']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listRepoIssues': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		var rgx = new RegExp('\{milestone\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['milestone'])
			if (args['milestone']) delete args['milestone']
		}
		if (args['state'] == null) args['state'] = "open"
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		var rgx = new RegExp('\{assignee\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['assignee'])
			if (args['assignee']) delete args['assignee']
		}
		var rgx = new RegExp('\{mentioned\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mentioned'])
			if (args['mentioned']) delete args['mentioned']
		}
		var rgx = new RegExp('\{labels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['labels'])
			if (args['labels']) delete args['labels']
		}
		if (args['sort'] == null) args['sort'] = "created"
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['direction'] == null) args['direction'] = "desc"
		var rgx = new RegExp('\{direction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['direction'])
			if (args['direction']) delete args['direction']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createIssue': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{assignee\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['assignee'])
			if (args['assignee']) delete args['assignee']
		}
		var rgx = new RegExp('\{milestone\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['milestone'])
			if (args['milestone']) delete args['milestone']
		}
		var rgx = new RegExp('\{labels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['labels'])
			if (args['labels']) delete args['labels']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getIssue': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createIssue': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{assignee\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['assignee'])
			if (args['assignee']) delete args['assignee']
		}
		if (args['state'] == null) args['state'] = "open"
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		var rgx = new RegExp('\{milestone\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['milestone'])
			if (args['milestone']) delete args['milestone']
		}
		var rgx = new RegExp('\{labels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['labels'])
			if (args['labels']) delete args['labels']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'listIssueComments': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/comments'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'postIssueComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/comments'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getIssueComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editIssueComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteIssueComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listIssueEvents': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/events'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listRepoEvents': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/events'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getIssueEvent': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/events/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listIssueLabels': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/labels'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'addIssueLabels': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/labels'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'replaceIssueLabels': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/labels'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'removeIssueLabels': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/labels'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'deleteIssueLabel': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/{number}/labels/{name}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listLabels': function(args, opts) {
		var url = 'repos/{user}/{repo}/labels'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createLabel': function(args, opts) {
		var url = 'repos/{user}/{repo}/labels'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['color'] == null) throw new Error('color is a required parameter')
		var rgx = new RegExp('\{color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['color'])
			if (args['color']) delete args['color']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getLabel': function(args, opts) {
		var url = 'repos/{user}/{repo}/labels/{name}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'updateLabel': function(args, opts) {
		var url = 'repos/{user}/{repo}/labels/{name}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['color'] == null) throw new Error('color is a required parameter')
		var rgx = new RegExp('\{color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['color'])
			if (args['color']) delete args['color']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteLabel': function(args, opts) {
		var url = 'repos/{user}/{repo}/labels/{name}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listMilestoneLabels': function(args, opts) {
		var url = 'repos/{user}/{repo}/milestones/{number}/labels'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listMilestones': function(args, opts) {
		var url = 'repos/{user}/{repo}/milestones'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createMilestone': function(args, opts) {
		var url = 'repos/{user}/{repo}/milestones'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (args['state'] == null) args['state'] = "open"
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{due_on\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['due_on'])
			if (args['due_on']) delete args['due_on']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getMilestone': function(args, opts) {
		var url = 'repos/{user}/{repo}/milestones/{number}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'updateMilestone': function(args, opts) {
		var url = 'repos/{user}/{repo}/milestones/{number}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (args['state'] == null) args['state'] = "open"
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{due_on\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['due_on'])
			if (args['due_on']) delete args['due_on']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteMilestone': function(args, opts) {
		var url = 'repos/{user}/{repo}/milestones/{number}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listUserOrgs': function(args, opts) {
		var url = 'users/{user}/orgs'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listOrgs': function(args, opts) {
		var url = 'users/orgs'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'getOrg': function(args, opts) {
		var url = 'orgs/{org}'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editOrg': function(args, opts) {
		var url = 'orgs/{org}'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		var rgx = new RegExp('\{billing_email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['billing_email'])
			if (args['billing_email']) delete args['billing_email']
		}
		var rgx = new RegExp('\{company\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['company'])
			if (args['company']) delete args['company']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{location\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['location'])
			if (args['location']) delete args['location']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'listOrgMembers': function(args, opts) {
		var url = 'orgs/{org}/members'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getOrgMember': function(args, opts) {
		var url = 'orgs/{org}/members/{user}'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'removeOrgMember': function(args, opts) {
		var url = 'orgs/{org}/members/{user}'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listOrgPublicMembers': function(args, opts) {
		var url = 'orgs/{org}/public_members'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'checkOrgPublicMember': function(args, opts) {
		var url = 'orgs/{org}/public_members/{user}'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'publicizeOrgMember': function(args, opts) {
		var url = 'orgs/{org}/public_members/{user}'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'concealOrgMember': function(args, opts) {
		var url = 'orgs/{org}/public_members/{user}'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listOrgTeams': function(args, opts) {
		var url = 'orgs/{org}/teams'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createTeam': function(args, opts) {
		var url = 'orgs/{org}/teams'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{repo_names\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo_names'])
			if (args['repo_names']) delete args['repo_names']
		}
		if (args['permission'] == null) args['permission'] = "pull"
		var rgx = new RegExp('\{permission\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['permission'])
			if (args['permission']) delete args['permission']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getTeam': function(args, opts) {
		var url = 'teams/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editOrg': function(args, opts) {
		var url = 'teams/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['permission'] == null) args['permission'] = "pull"
		var rgx = new RegExp('\{permission\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['permission'])
			if (args['permission']) delete args['permission']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteTeam': function(args, opts) {
		var url = 'teams/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listTeamMembers': function(args, opts) {
		var url = 'teams/{id}/members'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'getTeamMember': function(args, opts) {
		var url = 'teams/{id}/members/{user}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'addTeamMember': function(args, opts) {
		var url = 'teams/{id}/members/{user}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'removeTeamMember': function(args, opts) {
		var url = 'teams/{id}/members/{user}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listTeamRepos': function(args, opts) {
		var url = 'teams/{id}/repos'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getTeamRepo': function(args, opts) {
		var url = 'teams/{id}/repos/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'addTeamRepo': function(args, opts) {
		var url = 'teams/{id}/repos/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'removeTeamRepo': function(args, opts) {
		var url = 'teams/{id}/repos/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listPullRequests': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['state'] == null) args['state'] = "open"
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createPullRequest': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (args['base'] == null) throw new Error('base is a required parameter')
		var rgx = new RegExp('\{base\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base'])
			if (args['base']) delete args['base']
		}
		if (args['head'] == null) throw new Error('head is a required parameter')
		var rgx = new RegExp('\{head\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['head'])
			if (args['head']) delete args['head']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'createPullRequestFromIssue': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['issue'] == null) throw new Error('issue is a required parameter')
		var rgx = new RegExp('\{issue\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['issue'])
			if (args['issue']) delete args['issue']
		}
		if (args['base'] == null) throw new Error('base is a required parameter')
		var rgx = new RegExp('\{base\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base'])
			if (args['base']) delete args['base']
		}
		if (args['head'] == null) throw new Error('head is a required parameter')
		var rgx = new RegExp('\{head\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['head'])
			if (args['head']) delete args['head']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'updatePullRequest': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'listPullRequestCommits': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/commits'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listPullRequestFiles': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/files'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'checkPullRequestMerged': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/merge'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'mergePullRequest': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/merge'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		var rgx = new RegExp('\{commit_message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['commit_message'])
			if (args['commit_message']) delete args['commit_message']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'listPullRequestComments': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/comments'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'postPullRequestComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/comments'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getPullRequestComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editPullRequestComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deletePullRequestComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/pulls/{number}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['number'] == null) throw new Error('number is a required parameter')
		var rgx = new RegExp('\{number\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['number'])
			if (args['number']) delete args['number']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listRepos': function(args, opts) {
		var url = 'user/repos'
		args = args || {}
		if (args['type'] == null) args['type'] = "all"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (args['sort'] == null) args['sort'] = "full_name"
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{direction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['direction'])
			if (args['direction']) delete args['direction']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'createRepo': function(args, opts) {
		var url = 'user/repos'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{homepage\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['homepage'])
			if (args['homepage']) delete args['homepage']
		}
		if (args['private'] == null) args['private'] = "false"
		var rgx = new RegExp('\{private\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['private'])
			if (args['private']) delete args['private']
		}
		if (args['has_issues'] == null) args['has_issues'] = "true"
		var rgx = new RegExp('\{has_issues\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_issues'])
			if (args['has_issues']) delete args['has_issues']
		}
		if (args['has_wiki'] == null) args['has_wiki'] = "true"
		var rgx = new RegExp('\{has_wiki\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_wiki'])
			if (args['has_wiki']) delete args['has_wiki']
		}
		if (args['has_downloads'] == null) args['has_downloads'] = "true"
		var rgx = new RegExp('\{has_downloads\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_downloads'])
			if (args['has_downloads']) delete args['has_downloads']
		}
		var rgx = new RegExp('\{team_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['team_id'])
			if (args['team_id']) delete args['team_id']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'listUserRepos': function(args, opts) {
		var url = 'users/{user}/repos'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['type'] == null) args['type'] = "all"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (args['sort'] == null) args['sort'] = "full_name"
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{direction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['direction'])
			if (args['direction']) delete args['direction']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listOrgRepos': function(args, opts) {
		var url = 'orgs/{org}/repos'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['type'] == null) args['type'] = "all"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (args['sort'] == null) args['sort'] = "full_name"
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{direction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['direction'])
			if (args['direction']) delete args['direction']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createOrgRepo': function(args, opts) {
		var url = 'orgs/{org}/repos'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{homepage\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['homepage'])
			if (args['homepage']) delete args['homepage']
		}
		if (args['private'] == null) args['private'] = "false"
		var rgx = new RegExp('\{private\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['private'])
			if (args['private']) delete args['private']
		}
		if (args['has_issues'] == null) args['has_issues'] = "true"
		var rgx = new RegExp('\{has_issues\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_issues'])
			if (args['has_issues']) delete args['has_issues']
		}
		if (args['has_wiki'] == null) args['has_wiki'] = "true"
		var rgx = new RegExp('\{has_wiki\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_wiki'])
			if (args['has_wiki']) delete args['has_wiki']
		}
		if (args['has_downloads'] == null) args['has_downloads'] = "true"
		var rgx = new RegExp('\{has_downloads\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_downloads'])
			if (args['has_downloads']) delete args['has_downloads']
		}
		var rgx = new RegExp('\{team_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['team_id'])
			if (args['team_id']) delete args['team_id']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getRepo': function(args, opts) {
		var url = 'repos/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'updateRepo': function(args, opts) {
		var url = 'repos/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{homepage\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['homepage'])
			if (args['homepage']) delete args['homepage']
		}
		if (args['private'] == null) args['private'] = "false"
		var rgx = new RegExp('\{private\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['private'])
			if (args['private']) delete args['private']
		}
		if (args['has_issues'] == null) args['has_issues'] = "true"
		var rgx = new RegExp('\{has_issues\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_issues'])
			if (args['has_issues']) delete args['has_issues']
		}
		if (args['has_wiki'] == null) args['has_wiki'] = "true"
		var rgx = new RegExp('\{has_wiki\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_wiki'])
			if (args['has_wiki']) delete args['has_wiki']
		}
		if (args['has_downloads'] == null) args['has_downloads'] = "true"
		var rgx = new RegExp('\{has_downloads\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_downloads'])
			if (args['has_downloads']) delete args['has_downloads']
		}
		var rgx = new RegExp('\{team_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['team_id'])
			if (args['team_id']) delete args['team_id']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteRepo': function(args, opts) {
		var url = 'repos/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listContributors': function(args, opts) {
		var url = 'repos/{user}/{repo}/contributors'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		var rgx = new RegExp('\{anon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['anon'])
			if (args['anon']) delete args['anon']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listLanguages': function(args, opts) {
		var url = 'repos/{user}/{repo}/languages'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listTeams': function(args, opts) {
		var url = 'repos/{user}/{repo}/teams'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listTags': function(args, opts) {
		var url = 'repos/{user}/{repo}/tags'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listBranches': function(args, opts) {
		var url = 'repos/{user}/{repo}/branches'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getBranch': function(args, opts) {
		var url = 'repos/{user}/{repo}/branches/{branch}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['branch'] == null) throw new Error('branch is a required parameter')
		var rgx = new RegExp('\{branch\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['branch'])
			if (args['branch']) delete args['branch']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listCollaborators': function(args, opts) {
		var url = 'repos/{user}/{repo}/collaborators'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'checkCollaborator': function(args, opts) {
		var url = 'repos/{user}/{repo}/collaborators/{collaborator}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['collaborator'] == null) throw new Error('collaborator is a required parameter')
		var rgx = new RegExp('\{collaborator\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collaborator'])
			if (args['collaborator']) delete args['collaborator']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'addCollaborator': function(args, opts) {
		var url = 'repos/{user}/{repo}/collaborators/{collaborator}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['collaborator'] == null) throw new Error('collaborator is a required parameter')
		var rgx = new RegExp('\{collaborator\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collaborator'])
			if (args['collaborator']) delete args['collaborator']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'removeCollaborator': function(args, opts) {
		var url = 'repos/{user}/{repo}/collaborators/{collaborator}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['collaborator'] == null) throw new Error('collaborator is a required parameter')
		var rgx = new RegExp('\{collaborator\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collaborator'])
			if (args['collaborator']) delete args['collaborator']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listCommitsComments': function(args, opts) {
		var url = 'repos/{user}/{repo}/comments'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getCommitComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editCommitComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteCommitComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/comments/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'false'}, opts)
	},
	'listCommitComments': function(args, opts) {
		var url = 'repos/{user}/{repo}/commits/{sha}/comments'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'postCommitComment': function(args, opts) {
		var url = 'repos/{user}/{repo}/commits/{sha}/comments'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (args['commit_id'] == null) throw new Error('commit_id is a required parameter')
		var rgx = new RegExp('\{commit_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['commit_id'])
			if (args['commit_id']) delete args['commit_id']
		}
		if (args['line'] == null) throw new Error('line is a required parameter')
		var rgx = new RegExp('\{line\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['line'])
			if (args['line']) delete args['line']
		}
		if (args['path'] == null) throw new Error('path is a required parameter')
		var rgx = new RegExp('\{path\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['path'])
			if (args['path']) delete args['path']
		}
		if (args['position'] == null) throw new Error('position is a required parameter')
		var rgx = new RegExp('\{position\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['position'])
			if (args['position']) delete args['position']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getCommit': function(args, opts) {
		var url = 'repos/{user}/{repo}/commits/{sha}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listCommits': function(args, opts) {
		var url = 'repos/{user}/{repo}/commits'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		var rgx = new RegExp('\{path\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['path'])
			if (args['path']) delete args['path']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getCommit': function(args, opts) {
		var url = 'repos/{user}/{repo}/commits/{sha}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sha'] == null) throw new Error('sha is a required parameter')
		var rgx = new RegExp('\{sha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sha'])
			if (args['sha']) delete args['sha']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'compareCommits': function(args, opts) {
		var url = 'repos/{user}/{repo}/compare/{base}...{head}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['base'] == null) throw new Error('base is a required parameter')
		var rgx = new RegExp('\{base\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base'])
			if (args['base']) delete args['base']
		}
		if (args['head'] == null) throw new Error('head is a required parameter')
		var rgx = new RegExp('\{head\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['head'])
			if (args['head']) delete args['head']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getReadme': function(args, opts) {
		var url = 'repos/{user}/{repo}/readme'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['ref'] == null) args['ref'] = "master"
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getContents': function(args, opts) {
		var url = 'repos/{user}/{repo}/contents/{path}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['path'] == null) throw new Error('path is a required parameter')
		var rgx = new RegExp('\{path\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['path'])
			if (args['path']) delete args['path']
		}
		if (args['ref'] == null) args['ref'] = "master"
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'getArchive': function(args, opts) {
		var url = 'repos/{user}/{repo}/{archive_format}/{ref}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['archive_format'] == null) throw new Error('archive_format is a required parameter')
		var rgx = new RegExp('\{archive_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['archive_format'])
			if (args['archive_format']) delete args['archive_format']
		}
		if (args['ref'] == null) args['ref'] = "master"
		var rgx = new RegExp('\{ref\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ref'])
			if (args['ref']) delete args['ref']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listDownloads': function(args, opts) {
		var url = 'repos/{user}/{repo}/downloads'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createDownload': function(args, opts) {
		var url = 'repos/{user}/{repo}/downloads'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['size'] == null) throw new Error('size is a required parameter')
		var rgx = new RegExp('\{size\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['size'])
			if (args['size']) delete args['size']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{content_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getDownload': function(args, opts) {
		var url = 'repos/{user}/{repo}/downloads/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'deleteDownload': function(args, opts) {
		var url = 'repos/{user}/{repo}/downloads/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listForks': function(args, opts) {
		var url = 'repos/{user}/{repo}/forks'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['sort'] == null) args['sort'] = "newest"
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'fork': function(args, opts) {
		var url = 'repos/{user}/{repo}/forks'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'listRepoKeys': function(args, opts) {
		var url = 'repos/{user}/{repo}/keys'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createRepoKey': function(args, opts) {
		var url = 'repos/{user}/{repo}/keys'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'false'}, opts)
	},
	'getRepoKey': function(args, opts) {
		var url = 'repos/{user}/{repo}/keys/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editRepoKey': function(args, opts) {
		var url = 'repos/{user}/{repo}/keys/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteRepoKey': function(args, opts) {
		var url = 'repos/{user}/{repo}/keys/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listWatchers': function(args, opts) {
		var url = 'repos/{user}/{repo}/watchers'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listUserWatched': function(args, opts) {
		var url = 'repos/{user}/watched'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listWatched': function(args, opts) {
		var url = 'repos/watched'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'checkUserWatched': function(args, opts) {
		var url = 'repos/watched/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'watch': function(args, opts) {
		var url = 'repos/watched/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'unwatch': function(args, opts) {
		var url = 'repos/watched/{user}/{repo}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'hooks': function(args, opts) {
		var url = 'hooks'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listHooks': function(args, opts) {
		var url = 'repos/{user}/{repo}/hooks'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'createHook': function(args, opts) {
		var url = 'repos/{user}/{repo}/hooks'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['config'] == null) throw new Error('config is a required parameter')
		var rgx = new RegExp('\{config\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['config'])
			if (args['config']) delete args['config']
		}
		if (args['events'] == null) args['events'] = "['push']"
		var rgx = new RegExp('\{events\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['events'])
			if (args['events']) delete args['events']
		}
		var rgx = new RegExp('\{active\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['active'])
			if (args['active']) delete args['active']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getHook': function(args, opts) {
		var url = 'repos/{user}/{repo}/hooks/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editHook': function(args, opts) {
		var url = 'repos/{user}/{repo}/hooks/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['config'] == null) throw new Error('config is a required parameter')
		var rgx = new RegExp('\{config\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['config'])
			if (args['config']) delete args['config']
		}
		if (args['events'] == null) args['events'] = "['push']"
		var rgx = new RegExp('\{events\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['events'])
			if (args['events']) delete args['events']
		}
		var rgx = new RegExp('\{add_events\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['add_events'])
			if (args['add_events']) delete args['add_events']
		}
		var rgx = new RegExp('\{remove_events\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['remove_events'])
			if (args['remove_events']) delete args['remove_events']
		}
		var rgx = new RegExp('\{active\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['active'])
			if (args['active']) delete args['active']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'deleteHook': function(args, opts) {
		var url = 'repos/{user}/{repo}/hooks/{id}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'testHook': function(args, opts) {
		var url = 'repos/{user}/{repo}/hooks/{id}/test'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getUser': function(args, opts) {
		var url = 'users/{user}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'me': function(args, opts) {
		var url = 'user'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'editMe': function(args, opts) {
		var url = 'user'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{blog\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['blog'])
			if (args['blog']) delete args['blog']
		}
		var rgx = new RegExp('\{company\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['company'])
			if (args['company']) delete args['company']
		}
		var rgx = new RegExp('\{location\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['location'])
			if (args['location']) delete args['location']
		}
		var rgx = new RegExp('\{hireable\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hireable'])
			if (args['hireable']) delete args['hireable']
		}
		var rgx = new RegExp('\{bio\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bio'])
			if (args['bio']) delete args['bio']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'listEmails': function(args, opts) {
		var url = 'user/emails'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'addEmails': function(args, opts) {
		var url = 'user/emails'
		args = args || {}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'removeEmails': function(args, opts) {
		var url = 'user/emails'
		args = args || {}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listWatchers': function(args, opts) {
		var url = 'users/{user}/followers'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listWatched': function(args, opts) {
		var url = 'user/followers'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'listUserFollowing': function(args, opts) {
		var url = 'users/{user}/following'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listFollowing': function(args, opts) {
		var url = 'user/following'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'checkUserWatched': function(args, opts) {
		var url = 'user/following/{user}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'follow': function(args, opts) {
		var url = 'user/following/{user}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'PUT',params:args, auth: 'true'}, opts)
	},
	'unfollow': function(args, opts) {
		var url = 'user/following/{user}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listKeys': function(args, opts) {
		var url = 'user/keys'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'createKey': function(args, opts) {
		var url = 'user/keys'
		args = args || {}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'getKey': function(args, opts) {
		var url = 'user/keys/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'editKey': function(args, opts) {
		var url = 'user/keys/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		return http({provider:'github',url:url,method:'PATCH',params:args, auth: 'true'}, opts)
	},
	'deleteKey': function(args, opts) {
		var url = 'user/keys/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'github',url:url,method:'DELETE',params:args, auth: 'true'}, opts)
	},
	'listEvents': function(args, opts) {
		var url = 'events'
		args = args || {}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listRepoEvents': function(args, opts) {
		var url = 'repos/{user}/{repo}/events'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listIssuesEvents': function(args, opts) {
		var url = 'repos/{user}/{repo}/issues/events'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listNetworksEvents': function(args, opts) {
		var url = 'networks/{user}/{repo}/events'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listOrgPublicEvents': function(args, opts) {
		var url = 'orgs/{org}/events'
		args = args || {}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listUserReceivedEvents': function(args, opts) {
		var url = 'users/{user}/received_events'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listUserPublicReceivedEvents': function(args, opts) {
		var url = 'users/{user}/received_events/public'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listUserEvents': function(args, opts) {
		var url = 'users/{user}/events'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listUserPublicEvents': function(args, opts) {
		var url = 'users/{user}/events/public'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'listOrgEvents': function(args, opts) {
		var url = 'users/{user}/events/orgs/{org}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['org'] == null) throw new Error('org is a required parameter')
		var rgx = new RegExp('\{org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['org'])
			if (args['org']) delete args['org']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'true'}, opts)
	},
	'searchIssues': function(args, opts) {
		var url = 'legacy/issues/search/{user}/{repo}/{state}/{keyword}'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (args['repo'] == null) throw new Error('repo is a required parameter')
		var rgx = new RegExp('\{repo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['repo'])
			if (args['repo']) delete args['repo']
		}
		if (args['state'] == null) throw new Error('state is a required parameter')
		var rgx = new RegExp('\{state\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['state'])
			if (args['state']) delete args['state']
		}
		if (args['keyword'] == null) throw new Error('keyword is a required parameter')
		var rgx = new RegExp('\{keyword\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['keyword'])
			if (args['keyword']) delete args['keyword']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'searchRepos': function(args, opts) {
		var url = 'legacy/repos/search/{keyword}'
		args = args || {}
		if (args['keyword'] == null) throw new Error('keyword is a required parameter')
		var rgx = new RegExp('\{keyword\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['keyword'])
			if (args['keyword']) delete args['keyword']
		}
		var rgx = new RegExp('\{language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['language'])
			if (args['language']) delete args['language']
		}
		var rgx = new RegExp('\{start_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start_page'])
			if (args['start_page']) delete args['start_page']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'searchUsers': function(args, opts) {
		var url = 'legacy/user/search/{keyword}'
		args = args || {}
		if (args['keyword'] == null) throw new Error('keyword is a required parameter')
		var rgx = new RegExp('\{keyword\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['keyword'])
			if (args['keyword']) delete args['keyword']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'searchEmails': function(args, opts) {
		var url = 'legacy/user/email/{email}'
		args = args || {}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		return http({provider:'github',url:url,method:'GET',params:args, auth: 'false'}, opts)
	},
	'markdown': function(args, opts) {
		var url = 'markdown'
		args = args || {}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{context\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['context'])
			if (args['context']) delete args['context']
		}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	},
	'markdownRaw': function(args, opts) {
		var url = 'markdown/raw'
		args = args || {}
		return http({provider:'github',url:url,method:'POST',params:args, auth: 'true'}, opts)
	}
})
({
	auth:function(){return auth({provider:'delicious'})},
	'postUpdate': function(args, opts) {
		var url = '/posts/update'
		args = args || {}
	'postAdd': function(args, opts) {
		var url = '/posts/add'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{extended\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extended'])
			if (args['extended']) delete args['extended']
		}
		if (url.indexOf('[/extended]') !== -1) {
			url = url.replace('[/extended]', '/' + args['extended'])
			if (args['extended']) delete args['extended']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{dt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dt'])
			if (args['dt']) delete args['dt']
		}
		if (url.indexOf('[/dt]') !== -1) {
			url = url.replace('[/dt]', '/' + args['dt'])
			if (args['dt']) delete args['dt']
		}
		var rgx = new RegExp('\{replace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['replace'])
			if (args['replace']) delete args['replace']
		}
		if (url.indexOf('[/replace]') !== -1) {
			url = url.replace('[/replace]', '/' + args['replace'])
			if (args['replace']) delete args['replace']
		}
		var rgx = new RegExp('\{shared\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shared'])
			if (args['shared']) delete args['shared']
		}
		if (url.indexOf('[/shared]') !== -1) {
			url = url.replace('[/shared]', '/' + args['shared'])
			if (args['shared']) delete args['shared']
		}
		return http({provider:'delicious',url:url,method:'put',params:args}, opts)
	},
	'postDelete': function(args, opts) {
		var url = '/posts/delete'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		return http({provider:'delicious',url:url,method:'delete',params:args}, opts)
	},
	'postGet': function(args, opts) {
		var url = '/posts/get'
		args = args || {}
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{hashes\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hashes'])
			if (args['hashes']) delete args['hashes']
		}
		if (url.indexOf('[/hashes]') !== -1) {
			url = url.replace('[/hashes]', '/' + args['hashes'])
			if (args['hashes']) delete args['hashes']
		}
		var rgx = new RegExp('\{meta\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['meta'])
			if (args['meta']) delete args['meta']
		}
		if (url.indexOf('[/meta]') !== -1) {
			url = url.replace('[/meta]', '/' + args['meta'])
			if (args['meta']) delete args['meta']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{dt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dt'])
			if (args['dt']) delete args['dt']
		}
		if (url.indexOf('[/dt]') !== -1) {
			url = url.replace('[/dt]', '/' + args['dt'])
			if (args['dt']) delete args['dt']
		}
		return http({provider:'delicious',url:url,method:'get',params:args}, opts)
	},
	'postDates': function(args, opts) {
		var url = '/posts/dates'
		args = args || {}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		return http({provider:'delicious',url:url,method:'get',params:args}, opts)
	},
	'postRecent': function(args, opts) {
		var url = '/posts/recent'
		args = args || {}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		return http({provider:'delicious',url:url,method:'get',params:args}, opts)
	},
	'postAll': function(args, opts) {
		var url = '/posts/all'
		args = args || {}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{meta\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['meta'])
			if (args['meta']) delete args['meta']
		}
		if (url.indexOf('[/meta]') !== -1) {
			url = url.replace('[/meta]', '/' + args['meta'])
			if (args['meta']) delete args['meta']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{fromdt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdt'])
			if (args['fromdt']) delete args['fromdt']
		}
		if (url.indexOf('[/fromdt]') !== -1) {
			url = url.replace('[/fromdt]', '/' + args['fromdt'])
			if (args['fromdt']) delete args['fromdt']
		}
		var rgx = new RegExp('\{todt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todt'])
			if (args['todt']) delete args['todt']
		}
		if (url.indexOf('[/todt]') !== -1) {
			url = url.replace('[/todt]', '/' + args['todt'])
			if (args['todt']) delete args['todt']
		}
		return http({provider:'delicious',url:url,method:'get',params:args}, opts)
	},
	'postAllHashes': function(args, opts) {
		var url = '/posts/all?hashes'
		args = args || {}
	'postSuggest': function(args, opts) {
		var url = '/posts/suggest'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		return http({provider:'delicious',url:url,method:'get',params:args}, opts)
	},
	'tagsGet': function(args, opts) {
		var url = '/tags/get'
		args = args || {}
	'tagsDelete': function(args, opts) {
		var url = '/tags/delete'
		args = args || {}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		return http({provider:'delicious',url:url,method:'delete',params:args}, opts)
	},
	'tagsRename': function(args, opts) {
		var url = '/tags/rename'
		args = args || {}
		if (args['old'] == null) throw new Error('old is a required parameter')
		var rgx = new RegExp('\{old\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['old'])
			if (args['old']) delete args['old']
		}
		if (url.indexOf('[/old]') !== -1) {
			url = url.replace('[/old]', '/' + args['old'])
			if (args['old']) delete args['old']
		}
		if (args['new'] == null) throw new Error('new is a required parameter')
		var rgx = new RegExp('\{new\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['new'])
			if (args['new']) delete args['new']
		}
		if (url.indexOf('[/new]') !== -1) {
			url = url.replace('[/new]', '/' + args['new'])
			if (args['new']) delete args['new']
		}
		return http({provider:'delicious',url:url,method:'post',params:args}, opts)
	},
	'tagBundlesAll': function(args, opts) {
		var url = '/tags/bundles/all'
		args = args || {}
		var rgx = new RegExp('\{bundle\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bundle'])
			if (args['bundle']) delete args['bundle']
		}
		if (url.indexOf('[/bundle]') !== -1) {
			url = url.replace('[/bundle]', '/' + args['bundle'])
			if (args['bundle']) delete args['bundle']
		}
		return http({provider:'delicious',url:url,method:'get',params:args}, opts)
	},
	'tagBundlesSet': function(args, opts) {
		var url = '/tags/bundles/set'
		args = args || {}
		if (args['bundle'] == null) throw new Error('bundle is a required parameter')
		var rgx = new RegExp('\{bundle\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bundle'])
			if (args['bundle']) delete args['bundle']
		}
		if (url.indexOf('[/bundle]') !== -1) {
			url = url.replace('[/bundle]', '/' + args['bundle'])
			if (args['bundle']) delete args['bundle']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		return http({provider:'delicious',url:url,method:'put',params:args}, opts)
	},
	'tagBundlesDelete': function(args, opts) {
		var url = '/tags/bundles/delete'
		args = args || {}
		if (args['bundle'] == null) throw new Error('bundle is a required parameter')
		var rgx = new RegExp('\{bundle\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bundle'])
			if (args['bundle']) delete args['bundle']
		}
		if (url.indexOf('[/bundle]') !== -1) {
			url = url.replace('[/bundle]', '/' + args['bundle'])
			if (args['bundle']) delete args['bundle']
		}
		return http({provider:'delicious',url:url,method:'delete',params:args}, opts)
	}
})
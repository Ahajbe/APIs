function url_replace(url, args, param, type, required, def) {
	if (args[param] === undefined && required && def === undefined)
		throw new Error(param + ' is a required parameter');
	if (type == 'str' && args[param] !== undefined && args[param] !== undefined && args[param] !== null && typeof args[param] != 'string')
		args[param] = args[param].toString();
	if (type == 'int' && args[param] !== undefined && (parseFloat(args[param]) != parseInt(args[param], 10) || isNaN(args[param])))
		throw new Error(param + ' must be an integer');
	return url;
}

var provider = fs('/bin/delicious');

exports.auth = function() { return auth({provider:provider}) };
/** 
 * Returns the last update time for the user, as well as the number of new items in the user's inbox since it was last visited.
 * @category Update
 * @methodhttp GET
 */
exports.postUpdate = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/update';
	args = args || {};
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Add a post to Delicious.
 * @category Posts
 * @param {string} [url] The URL of the item.
 * @param {string} [description] The description of the item.
 * @param {string} extended Notes for the item.
 * @param {string} tags Tags for the item (space delimited).
 * @param {string} dt Datestamp of the item (format "CCYY-MM-DDThh:mm:ssZ"). Requires a LITERAL "T" and "Z" like in ISO8601 at http://www.cl.cam.ac.uk/~mgk25/iso-time.html for example: "1984-09-01T14:21:31Z"
 * @param {string} replace Don't replace post if given url has already been posted.
 * @param {string} shared Make the item private.
 * @methodhttp GET
 */
exports.postAdd = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/add';
	args = args || {};
	url = url_replace(url, args, 'url', 'str', true);
	url = url_replace(url, args, 'description', 'str', true);
	url = url_replace(url, args, 'extended', 'str');
	url = url_replace(url, args, 'tags', 'str');
	url = url_replace(url, args, 'dt', 'str');
	url = url_replace(url, args, 'replace', 'str', false, "no");
	url = url_replace(url, args, 'shared', 'str', false, "no");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Delete a post from Delicious.
 * @category Posts
 * @param {string} [url] The URL of the item.
 * @methodhttp DELETE
 */
exports.postDelete = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/delete';
	args = args || {};
	url = url_replace(url, args, 'url', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns one or more posts on a single day matching the arguments. If no date or url is given, most recent date will be used.
 * @category Posts
 * @param {string} tag Filter by this tag (space delimited).
 * @param {string} dt Filter by this date, defaults to the most recent date on which bookmarks were saved.
 * @param {string} url Fetch a bookmark for this URL, regardless of date. Note: Be sure to URL-encode the argument value.
 * @param {string} hashes Fetch multiple bookmarks by one or more URL MD5s regardless of date, separated by URL-encoded spaces (ie. '+').
 * @param {string} meta Include change detection signatures on each item in a 'meta' attribute. Clients wishing to maintain a synchronized local store of bookmarks should retain the value of this attribute - its value will change when any significant field of the bookmark changes.
 * @methodhttp GET
 */
exports.postGet = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/get';
	args = args || {};
	url = url_replace(url, args, 'tag', 'str');
	url = url_replace(url, args, 'dt', 'str');
	url = url_replace(url, args, 'url', 'str');
	url = url_replace(url, args, 'hashes', 'str');
	url = url_replace(url, args, 'meta', 'str', false, "yes");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a list of the most recent posts, filtered by argument. Maximum 100.
 * @category Posts
 * @param {string} tag Filter by this tag.
 * @param {integer} count Number of items to retrieve (Default:15, Maximum:100).
 * @methodhttp GET
 */
exports.postRecent = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/recent';
	args = args || {};
	url = url_replace(url, args, 'tag', 'str');
	url = url_replace(url, args, 'count', 'int', false, "15");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a list of dates with the number of posts at each date.
 * @category Posts
 * @param {string} tag Filter by this tag.
 * @methodhttp GET
 */
exports.postDates = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/dates';
	args = args || {};
	url = url_replace(url, args, 'tag', 'str');
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns all posts. Please use sparingly. Call the update function to see if you need to fetch this at all.
 * @category Posts
 * @param {string} tag Filter by this tag.
 * @param {integer} start Start returning posts this many results into the set.
 * @param {integer} results Return this many results.
 * @param {string} fromdt Filter for posts on this date or later.
 * @param {string} todt Filter for posts on this date or earlier.
 * @param {string} meta Include change detection signatures on each item in a 'meta' attribute. Clients wishing to maintain a synchronized local store of bookmarks should retain the value of this attribute - its value will change when any significant field of the bookmark changes.
 * @methodhttp GET
 */
exports.postAll = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/all';
	args = args || {};
	url = url_replace(url, args, 'tag', 'str');
	url = url_replace(url, args, 'start', 'int');
	url = url_replace(url, args, 'results', 'int');
	url = url_replace(url, args, 'fromdt', 'str');
	url = url_replace(url, args, 'todt', 'str');
	url = url_replace(url, args, 'meta', 'str', false, "yes");
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a change manifest of all posts. Call the update function to see if you need to fetch this at all.
 * @category Posts
 * @methodhttp GET
 */
exports.postAllHashes = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/all?hashes';
	args = args || {};
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a list of popular tags, recommended tags and network tags for a user.
 * @category Posts
 * @param {string} [url] URL for which you'd like suggestions.
 * @methodhttp GET
 */
exports.postSuggest = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/posts/suggest';
	args = args || {};
	url = url_replace(url, args, 'url', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Returns a list of tags and number of times used by a user.
 * @category Tags
 * @methodhttp GET
 */
exports.tagsGet = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/tags/get';
	args = args || {};
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Delete an existing tag.
 * @category Tags
 * @param {string} [tag] Tag to delete.
 * @methodhttp DELETE
 */
exports.tagsDelete = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/tags/delete';
	args = args || {};
	url = url_replace(url, args, 'tag', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Rename an existing tag with a new tag name.
 * @category Tags
 * @param {string} [old] Tag to rename.
 * @param {string} [new] New tag name.
 * @methodhttp GET
 */
exports.tagsRename = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/tags/rename';
	args = args || {};
	url = url_replace(url, args, 'old', 'str', true);
	url = url_replace(url, args, 'new', 'str', true);
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Retrieve all of a user's bundles.
 * @category Tag Bundles
 * @param {string} bundle Fetch just the named bundle.
 * @methodhttp GET
 */
exports.tagBundlesAll = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/tags/bundles/all';
	args = args || {};
	url = url_replace(url, args, 'bundle', 'str');
	return http({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Assign a set of tags to a single bundle, wipes away previous settings for bundle.
 * @category Tag Bundles
 * @param {string} [bundle] Name of the bundle.
 * @param {string} [tags] List of tags, space-separated.
 * @methodhttp PUT
 */
exports.tagBundlesSet = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/tags/bundles/set';
	args = args || {};
	url = url_replace(url, args, 'bundle', 'str', true);
	url = url_replace(url, args, 'tags', 'str', true);
	return http.put({provider:provider,url:url,params:args, auth:'manual'}, opts);
};

/** 
 * Delete a bundle.
 * @category Tag Bundles
 * @param {string} [bundle] Name of the bundle.
 * @methodhttp DELETE
 */
exports.tagBundlesDelete = function(args, opts) {
	var url = 'https://api.del.icio.us/v1/tags/bundles/delete';
	args = args || {};
	url = url_replace(url, args, 'bundle', 'str', true);
	return http.delete({provider:provider,url:url,params:args, auth:'manual'}, opts);
};
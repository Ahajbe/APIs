({
	auth:function(){return auth({provider:'nodester'})},
	'coupon': function(args, opts) {
		var url = 'http://nodester.com//coupon'
		args = args || {}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'status': function(args, opts) {
		var url = 'http://nodester.com//status'
		args = args || {}
		return http({provider:'nodester',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'post_user': function(args, opts) {
		var url = 'http://nodester.com//user'
		args = args || {}
		if (args['coupon'] == null) throw new Error('coupon is a required parameter')
		var rgx = new RegExp('\{coupon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['coupon'])
			if (args['coupon']) delete args['coupon']
		}
		if (url.indexOf('[/coupon]') !== -1) {
			url = url.replace('[/coupon]', '/' + args['coupon'])
			if (args['coupon']) delete args['coupon']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		if (args['password'] == null) throw new Error('password is a required parameter')
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (args['rsakey'] == null) throw new Error('rsakey is a required parameter')
		var rgx = new RegExp('\{rsakey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rsakey'])
			if (args['rsakey']) delete args['rsakey']
		}
		if (url.indexOf('[/rsakey]') !== -1) {
			url = url.replace('[/rsakey]', '/' + args['rsakey'])
			if (args['rsakey']) delete args['rsakey']
		}
		if (url.indexOf('[/coupon]') !== -1) url = url.replace('[/coupon]', '')
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/rsakey]') !== -1) url = url.replace('[/rsakey]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'put_user': function(args, opts) {
		var url = 'http://api.nodester.com//user'
		args = args || {}
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		var rgx = new RegExp('\{rsakey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rsakey'])
			if (args['rsakey']) delete args['rsakey']
		}
		if (url.indexOf('[/rsakey]') !== -1) {
			url = url.replace('[/rsakey]', '/' + args['rsakey'])
			if (args['rsakey']) delete args['rsakey']
		}
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/rsakey]') !== -1) url = url.replace('[/rsakey]', '')
		return http({provider:'nodester',url:url,method:'PUT',params:args, auth:'none'}, opts)
	},
	'delete_user': function(args, opts) {
		var url = 'http://api.nodester.com//user'
		args = args || {}
		return http({provider:'nodester',url:url,method:'DELETE',params:args}, opts)
	},
	'post_app': function(args, opts) {
		var url = 'http://api.nodester.com//app'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['start'] == null) throw new Error('start is a required parameter')
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args}, opts)
	},
	'put_app_update': function(args, opts) {
		var url = 'http://api.nodester.com//app'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['start'] == null) throw new Error('start is a required parameter')
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'nodester',url:url,method:'PUT',params:args}, opts)
	},
	'put_app_startstop': function(args, opts) {
		var url = 'http://api.nodester.com//app'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['running'] == null) throw new Error('running is a required parameter')
		var rgx = new RegExp('\{running\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['running'])
			if (args['running']) delete args['running']
		}
		if (url.indexOf('[/running]') !== -1) {
			url = url.replace('[/running]', '/' + args['running'])
			if (args['running']) delete args['running']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/running]') !== -1) url = url.replace('[/running]', '')
		return http({provider:'nodester',url:url,method:'PUT',params:args}, opts)
	},
	'delete_app': function(args, opts) {
		var url = 'http://api.nodester.com//app'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		return http({provider:'nodester',url:url,method:'DELETE',params:args}, opts)
	},
	'app_info': function(args, opts) {
		var url = 'http://api.nodester.com//app/{appname}'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		return http({provider:'nodester',url:url,method:'GET',params:args}, opts)
	},
	'app_logs': function(args, opts) {
		var url = 'http://api.nodester.com//applogs/{appname}'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		return http({provider:'nodester',url:url,method:'GET',params:args}, opts)
	},
	'put_env': function(args, opts) {
		var url = 'http://api.nodester.com//env'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['key'] == null) throw new Error('key is a required parameter')
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'nodester',url:url,method:'PUT',params:args}, opts)
	},
	'delete_env': function(args, opts) {
		var url = 'http://api.nodester.com//env'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['key'] == null) throw new Error('key is a required parameter')
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		return http({provider:'nodester',url:url,method:'DELETE',params:args}, opts)
	},
	'get_env': function(args, opts) {
		var url = 'http://api.nodester.com//env'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['key'] == null) throw new Error('key is a required parameter')
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		return http({provider:'nodester',url:url,method:'GET',params:args}, opts)
	},
	'apps': function(args, opts) {
		var url = 'http://api.nodester.com//app'
		args = args || {}
		return http({provider:'nodester',url:url,method:'GET',params:args}, opts)
	},
	'npm_install': function(args, opts) {
		var url = 'http://api.nodester.com//npm'
		args = args || {}
		if (args['action'] == null) args['action'] = "install"
		var rgx = new RegExp('\{action\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action'])
			if (args['action']) delete args['action']
		}
		if (url.indexOf('[/action]') !== -1) {
			url = url.replace('[/action]', '/' + args['action'])
			if (args['action']) delete args['action']
		}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['package'] == null) throw new Error('package is a required parameter')
		var rgx = new RegExp('\{package\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['package'])
			if (args['package']) delete args['package']
		}
		if (url.indexOf('[/package]') !== -1) {
			url = url.replace('[/package]', '/' + args['package'])
			if (args['package']) delete args['package']
		}
		if (url.indexOf('[/action]') !== -1) url = url.replace('[/action]', '')
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/package]') !== -1) url = url.replace('[/package]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args}, opts)
	},
	'npm_update': function(args, opts) {
		var url = 'http://api.nodester.com//npm'
		args = args || {}
		if (args['action'] == null) args['action'] = "update"
		var rgx = new RegExp('\{action\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action'])
			if (args['action']) delete args['action']
		}
		if (url.indexOf('[/action]') !== -1) {
			url = url.replace('[/action]', '/' + args['action'])
			if (args['action']) delete args['action']
		}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['package'] == null) throw new Error('package is a required parameter')
		var rgx = new RegExp('\{package\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['package'])
			if (args['package']) delete args['package']
		}
		if (url.indexOf('[/package]') !== -1) {
			url = url.replace('[/package]', '/' + args['package'])
			if (args['package']) delete args['package']
		}
		if (url.indexOf('[/action]') !== -1) url = url.replace('[/action]', '')
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/package]') !== -1) url = url.replace('[/package]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args}, opts)
	},
	'npm_uninstall': function(args, opts) {
		var url = 'http://api.nodester.com//npm'
		args = args || {}
		if (args['action'] == null) args['action'] = "uninstall"
		var rgx = new RegExp('\{action\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action'])
			if (args['action']) delete args['action']
		}
		if (url.indexOf('[/action]') !== -1) {
			url = url.replace('[/action]', '/' + args['action'])
			if (args['action']) delete args['action']
		}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['package'] == null) throw new Error('package is a required parameter')
		var rgx = new RegExp('\{package\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['package'])
			if (args['package']) delete args['package']
		}
		if (url.indexOf('[/package]') !== -1) {
			url = url.replace('[/package]', '/' + args['package'])
			if (args['package']) delete args['package']
		}
		if (url.indexOf('[/action]') !== -1) url = url.replace('[/action]', '')
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/package]') !== -1) url = url.replace('[/package]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args}, opts)
	},
	'post_appdomains': function(args, opts) {
		var url = 'http://api.nodester.com//appdomains'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args}, opts)
	},
	'delete_appdomains': function(args, opts) {
		var url = 'http://api.nodester.com//appdomains'
		args = args || {}
		if (args['appname'] == null) throw new Error('appname is a required parameter')
		var rgx = new RegExp('\{appname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (url.indexOf('[/appname]') !== -1) {
			url = url.replace('[/appname]', '/' + args['appname'])
			if (args['appname']) delete args['appname']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/appname]') !== -1) url = url.replace('[/appname]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		return http({provider:'nodester',url:url,method:'DELETE',params:args}, opts)
	},
	'get_appdomains': function(args, opts) {
		var url = 'http://api.nodester.com//appdomains'
		args = args || {}
		return http({provider:'nodester',url:url,method:'GET',params:args}, opts)
	},
	'post_reset_password': function(args, opts) {
		var url = 'http://api.nodester.com//reset_password'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		return http({provider:'nodester',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'put_reset_password': function(args, opts) {
		var url = 'http://api.nodester.com//reset_password/{token}'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (args['password'] == null) throw new Error('password is a required parameter')
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		return http({provider:'nodester',url:url,method:'PUT',params:args, auth:'none'}, opts)
	}
})
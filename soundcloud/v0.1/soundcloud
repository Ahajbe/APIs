({
	auth:function(){auth({provider:'soundcloud'})},
	'get_tracks': function(args, opts) {
		var url = 'tracks.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{bpm-from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bpm-from'])
			if (args['bpm-from']) delete args['bpm-from']
		}
		var rgx = new RegExp('\{bpm-to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bpm-to'])
			if (args['bpm-to']) delete args['bpm-to']
		}
		var rgx = new RegExp('\{duration-from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['duration-from'])
			if (args['duration-from']) delete args['duration-from']
		}
		var rgx = new RegExp('\{duration-to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['duration-to'])
			if (args['duration-to']) delete args['duration-to']
		}
		var rgx = new RegExp('\{created_at-from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['created_at-from'])
			if (args['created_at-from']) delete args['created_at-from']
		}
		var rgx = new RegExp('\{created_at-to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['created_at-to'])
			if (args['created_at-to']) delete args['created_at-to']
		}
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{genres\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['genres'])
			if (args['genres']) delete args['genres']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'post_tracks': function(args, opts) {
		var url = 'tracks.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (args['asset_data'] == null) throw new Error('asset_data is a required parameter')
		var rgx = new RegExp('\{asset_data\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['asset_data'])
			if (args['asset_data']) delete args['asset_data']
		}
		return http({provider:'soundcloud',url:url,method:'POST',params:args, auth: "manual"}, opts)
	},
	'get_track': function(args, opts) {
		var url = 'tracks/{track_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'put_track': function(args, opts) {
		var url = 'tracks/{track_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (args['asset_data'] == null) throw new Error('asset_data is a required parameter')
		var rgx = new RegExp('\{asset_data\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['asset_data'])
			if (args['asset_data']) delete args['asset_data']
		}
		return http({provider:'soundcloud',url:url,method:'PUT',params:args, auth: "manual"}, opts)
	},
	'delete_track': function(args, opts) {
		var url = 'tracks/{track_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'DELETE',params:args, auth: "manual"}, opts)
	},
	'get_track_comments': function(args, opts) {
		var url = 'tracks/{track_id}/comments.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'post_track_comments': function(args, opts) {
		var url = 'tracks/{track_id}/comments.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'POST',params:args, auth: "manual"}, opts)
	},
	'get_track_permissions': function(args, opts) {
		var url = 'tracks/{track_id}/permissions.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'put_track_permissions': function(args, opts) {
		var url = 'tracks/{track_id}/permissions.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'PUT',params:args, auth: "manual"}, opts)
	},
	'get_track_secret-token': function(args, opts) {
		var url = 'tracks/{track_id}/secret-token.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'put_track_secret_token': function(args, opts) {
		var url = 'tracks/{track_id}/secret-token.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'PUT',params:args, auth: "manual"}, opts)
	},
	'get_users': function(args, opts) {
		var url = 'users.{format}'
		args = args || {}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user': function(args, opts) {
		var url = 'users/{user_id}.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user_tracks': function(args, opts) {
		var url = 'users/{user_id}/tracks.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user_comments': function(args, opts) {
		var url = 'users/{user_id}/comments.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user_followings': function(args, opts) {
		var url = 'users/{user_id}/followings.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user_following': function(args, opts) {
		var url = 'users/{user_id}/followings/{contact_id}.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'put_user_followings': function(args, opts) {
		var url = 'users/{user_id}/followings/{contact_id}.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'PUT',params:args, auth: "manual"}, opts)
	},
	'delete_user_followings': function(args, opts) {
		var url = 'users/{user_id}/followings/{contact_id}.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'DELETE',params:args, auth: "manual"}, opts)
	},
	'get_user_followers': function(args, opts) {
		var url = 'users/{user_id}/followers.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user_follower': function(args, opts) {
		var url = 'users/{user_id}/followers/{contact_id}.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user_favorites': function(args, opts) {
		var url = 'users/{user_id}/favorites.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'put_user_favorites': function(args, opts) {
		var url = 'users/{user_id}/favorites/{track_id}.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'PUT',params:args, auth: "manual"}, opts)
	},
	'delete_user_favorites': function(args, opts) {
		var url = 'users/{user_id}/favorites/{track_id}.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'DELETE',params:args, auth: "manual"}, opts)
	},
	'get_user_groups': function(args, opts) {
		var url = 'users/{user_id}/groups.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_user_playlists': function(args, opts) {
		var url = 'users/{user_id}/playlists.{format}'
		args = args || {}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'me': function(args, opts) {
		var url = 'me.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'get_me_tracks': function(args, opts) {
		var url = 'me/tracks.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'get_me_comments': function(args, opts) {
		var url = 'me/comments.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'get_me_followings': function(args, opts) {
		var url = 'me/followings.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'get_me_following': function(args, opts) {
		var url = 'me/followings/{contact_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'put_me_followings': function(args, opts) {
		var url = 'me/followings/{contact_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		return http({provider:'soundcloud',url:url,method:'PUT',params:args, auth: "oauth2"}, opts)
	},
	'delete_me_followings': function(args, opts) {
		var url = 'me/followings/{contact_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		return http({provider:'soundcloud',url:url,method:'DELETE',params:args, auth: "oauth2"}, opts)
	},
	'get_me_followers': function(args, opts) {
		var url = 'me/followers.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'get_me_follower': function(args, opts) {
		var url = 'me/followers/{contact_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['contact_id'] == null) throw new Error('contact_id is a required parameter')
		var rgx = new RegExp('\{contact_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contact_id'])
			if (args['contact_id']) delete args['contact_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_me_favorites': function(args, opts) {
		var url = 'me/favorites.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'put_me_favorites': function(args, opts) {
		var url = 'me/favorites/{track_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'PUT',params:args, auth: "oauth2"}, opts)
	},
	'delete_me_favorites': function(args, opts) {
		var url = 'me/favorites/{track_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['track_id'] == null) throw new Error('track_id is a required parameter')
		var rgx = new RegExp('\{track_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_id'])
			if (args['track_id']) delete args['track_id']
		}
		return http({provider:'soundcloud',url:url,method:'DELETE',params:args, auth: "oauth2"}, opts)
	},
	'get_me_groups': function(args, opts) {
		var url = 'me/groups.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'get_me_playlists': function(args, opts) {
		var url = 'me/playlists.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "oauth2"}, opts)
	},
	'get_playlists': function(args, opts) {
		var url = 'playlists.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{license\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['license'])
			if (args['license']) delete args['license']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_playlist': function(args, opts) {
		var url = 'playlists/{playlist_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_groups': function(args, opts) {
		var url = 'groups.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_group': function(args, opts) {
		var url = 'groups/{group_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_group_users': function(args, opts) {
		var url = 'groups/{group_id}/users.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_group_moderators': function(args, opts) {
		var url = 'groups/{group_id}/moderators.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_group_members': function(args, opts) {
		var url = 'groups/{group_id}/members.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_group_contributors': function(args, opts) {
		var url = 'groups/{group_id}/contributors.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_group_tracks': function(args, opts) {
		var url = 'groups/{group_id}/tracks.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'get_comment': function(args, opts) {
		var url = 'comments/{comment_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['playlist_id'] == null) throw new Error('playlist_id is a required parameter')
		var rgx = new RegExp('\{playlist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlist_id'])
			if (args['playlist_id']) delete args['playlist_id']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	},
	'resolve': function(args, opts) {
		var url = 'resolve.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		return http({provider:'soundcloud',url:url,method:'GET',params:args, auth: "manual"}, opts)
	}
})
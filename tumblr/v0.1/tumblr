({
	auth:function(){auth({provider:'tumblr'})},
	'blog-info': function(args, opts) {
		var url = 'blog/{base-hostname}/info'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'blog-avatar': function(args, opts) {
		var url = 'blog/{base-hostname}/avatar/{size}'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['size'] == null) args['size'] = "64"
		var rgx = new RegExp('\{size\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['size'])
			if (args['size']) delete args['size']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'blog-followers': function(args, opts) {
		var url = 'blog/{base-hostname}/followers'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['limit'] == null) args['limit'] = "20"
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (args['offset'] == null) args['offset'] = "0"
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'posts': function(args, opts) {
		var url = 'blog/{base-hostname}/posts/{type}'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (args['limit'] == null) args['limit'] = "20"
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (args['offset'] == null) args['offset'] = "0"
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (args['reblog_info'] == null) args['reblog_info'] = "false"
		var rgx = new RegExp('\{reblog_info\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['reblog_info'])
			if (args['reblog_info']) delete args['reblog_info']
		}
		if (args['notes_info'] == null) args['notes_info'] = "false"
		var rgx = new RegExp('\{notes_info\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notes_info'])
			if (args['notes_info']) delete args['notes_info']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'blog-queue': function(args, opts) {
		var url = 'blog/{base-hostname}/posts/queue'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'blog-drafts': function(args, opts) {
		var url = 'blog/{base-hostname}/posts/draft'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'blog-submissions': function(args, opts) {
		var url = 'blog/{base-hostname}/posts/submission'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'post-text': function(args, opts) {
		var url = 'blog/{base-hostname}/post'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) args['type'] = "text"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-photo': function(args, opts) {
		var url = 'blog/{base-hostname}/post'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) args['type'] = "photo"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		var rgx = new RegExp('\{caption\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['caption'])
			if (args['caption']) delete args['caption']
		}
		var rgx = new RegExp('\{link\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link'])
			if (args['link']) delete args['link']
		}
		var rgx = new RegExp('\{source\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source'])
			if (args['source']) delete args['source']
		}
		var rgx = new RegExp('\{data\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['data'])
			if (args['data']) delete args['data']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-quote': function(args, opts) {
		var url = 'blog/{base-hostname}/post'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) args['type'] = "quote"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		if (args['quote'] == null) throw new Error('quote is a required parameter')
		var rgx = new RegExp('\{quote\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['quote'])
			if (args['quote']) delete args['quote']
		}
		var rgx = new RegExp('\{source\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source'])
			if (args['source']) delete args['source']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-link': function(args, opts) {
		var url = 'blog/{base-hostname}/post'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) args['type'] = "link"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-chat': function(args, opts) {
		var url = 'blog/{base-hostname}/post'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) args['type'] = "chat"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (args['conversation'] == null) throw new Error('conversation is a required parameter')
		var rgx = new RegExp('\{conversation\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['conversation'])
			if (args['conversation']) delete args['conversation']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-audio': function(args, opts) {
		var url = 'blog/{base-hostname}/post'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) args['type'] = "audio"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		var rgx = new RegExp('\{caption\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['caption'])
			if (args['caption']) delete args['caption']
		}
		var rgx = new RegExp('\{external_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['external_url'])
			if (args['external_url']) delete args['external_url']
		}
		var rgx = new RegExp('\{data\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['data'])
			if (args['data']) delete args['data']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-video': function(args, opts) {
		var url = 'blog/{base-hostname}/post'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) args['type'] = "video"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		var rgx = new RegExp('\{caption\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['caption'])
			if (args['caption']) delete args['caption']
		}
		var rgx = new RegExp('\{embed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['embed'])
			if (args['embed']) delete args['embed']
		}
		var rgx = new RegExp('\{data\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['data'])
			if (args['data']) delete args['data']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-edit': function(args, opts) {
		var url = 'blog/{base-hostname}/post/edit'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-reblog': function(args, opts) {
		var url = 'blog/{base-hostname}/post/reblog'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tweet'])
			if (args['tweet']) delete args['tweet']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (args['markdown'] == null) args['markdown'] = "false"
		var rgx = new RegExp('\{markdown\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['markdown'])
			if (args['markdown']) delete args['markdown']
		}
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['reblog_key'] == null) throw new Error('reblog_key is a required parameter')
		var rgx = new RegExp('\{reblog_key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['reblog_key'])
			if (args['reblog_key']) delete args['reblog_key']
		}
		var rgx = new RegExp('\{comment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment'])
			if (args['comment']) delete args['comment']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'post-delete': function(args, opts) {
		var url = 'blog/{base-hostname}/post/delete'
		args = args || {}
		if (args['base-hostname'] == null) throw new Error('base-hostname is a required parameter')
		var rgx = new RegExp('\{base-hostname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base-hostname'])
			if (args['base-hostname']) delete args['base-hostname']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'user-dashboard': function(args, opts) {
		var url = 'user/dashboard'
		args = args || {}
		if (args['limit'] == null) args['limit'] = "20"
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (args['offset'] == null) args['offset'] = "0"
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (args['since_id'] == null) args['since_id'] = "0"
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'user-likes': function(args, opts) {
		var url = 'user/likes'
		args = args || {}
		if (args['limit'] == null) args['limit'] = "20"
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (args['offset'] == null) args['offset'] = "0"
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'user-following': function(args, opts) {
		var url = 'user/following'
		args = args || {}
		if (args['limit'] == null) args['limit'] = "20"
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (args['offset'] == null) args['offset'] = "0"
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'GET',params:args}, opts)
	},
	'user-follow': function(args, opts) {
		var url = 'user/follow'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	},
	'user-unfollow': function(args, opts) {
		var url = 'user/unfollow'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		return http({provider:'tumblr',url:'http://api.tumblr.com/v2//' + url,method:'POST',params:args}, opts)
	}
})
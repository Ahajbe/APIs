({
	auth:function(){return auth({provider:'stackexchange'})},
	'answersList': function(args, opts) {
		var url = 'answers'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'answersGet': function(args, opts) {
		var url = 'answers/{ids}'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'answersCommentsGet': function(args, opts) {
		var url = 'answers/{ids}/comments'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'badgesList': function(args, opts) {
		var url = 'badges'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'badgesGet': function(args, opts) {
		var url = 'badges/{ids}'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'namedBadgesList': function(args, opts) {
		var url = 'badges/name'
		args = args || {}
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'tagBadgesList': function(args, opts) {
		var url = 'badges/tags'
		args = args || {}
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'commentsList': function(args, opts) {
		var url = 'comments'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'commentsGet': function(args, opts) {
		var url = 'comments/{ids}'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'deleteComment': function(args, opts) {
		var url = 'comments/{id}/delete'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{preview\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/preview]') !== -1) {
			url = url.replace('[/preview]', '/' + args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/preview]') !== -1) url = url.replace('[/preview]', '')
		return http({provider:'stackexchange',url:url,method:'DELETE',params:args, auth: 'oauth2'}, opts)
	},
	'editComment': function(args, opts) {
		var url = 'comments/{id}/edit'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{preview\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/preview]') !== -1) {
			url = url.replace('[/preview]', '/' + args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/preview]') !== -1) url = url.replace('[/preview]', '')
		return http({provider:'stackexchange',url:url,method:'POST',params:args, auth: 'oauth2'}, opts)
	},
	'eventsList': function(args, opts) {
		var url = 'events'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'oauth2'}, opts)
	},
	'siteInfo': function(args, opts) {
		var url = 'info'
		args = args || {}
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'postsList': function(args, opts) {
		var url = 'posts'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'postsGet': function(args, opts) {
		var url = 'posts/{ids}'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'commentsGet': function(args, opts) {
		var url = 'posts/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'newComment': function(args, opts) {
		var url = 'posts/{id}/comments/add'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{preview\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/preview]') !== -1) {
			url = url.replace('[/preview]', '/' + args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/preview]') !== -1) url = url.replace('[/preview]', '')
		return http({provider:'stackexchange',url:url,method:'POST',params:args, auth: 'oauth2'}, opts)
	},
	'postsRevisions': function(args, opts) {
		var url = 'posts/{ids}/revisions'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'postsSuggestedEdits': function(args, opts) {
		var url = 'posts/{ids}/suggested-edits'
		args = args || {}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'error': function(args, opts) {
		var url = 'errors/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'privilegesList': function(args, opts) {
		var url = 'privileges'
		args = args || {}
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'questionsList': function(args, opts) {
		var url = 'questions'
		args = args || {}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'questionsGet': function(args, opts) {
		var url = 'questions/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'questionAnswersGet': function(args, opts) {
		var url = 'questions/{id}/answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'questionCommentsGet': function(args, opts) {
		var url = 'questions/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'linkedQuestionsGet': function(args, opts) {
		var url = 'questions/{id}/linked'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'relatedQuestionsGet': function(args, opts) {
		var url = 'questions/{id}/related'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'questionTimelinesGet': function(args, opts) {
		var url = 'questions/{id}/timeline'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'unansweredQuestionsList': function(args, opts) {
		var url = 'questions/unanswared'
		args = args || {}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'questionsWithNoAnswersList': function(args, opts) {
		var url = 'questions/no-answers'
		args = args || {}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'revisionsGet': function(args, opts) {
		var url = 'revisions/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'specificRevisionsGet': function(args, opts) {
		var url = 'revisions/{id}/{revisionguid}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['revisionguid'] == null) throw new Error('revisionguid is a required parameter')
		var rgx = new RegExp('\{revisionguid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['revisionguid'])
			if (args['revisionguid']) delete args['revisionguid']
		}
		if (url.indexOf('[/revisionguid]') !== -1) {
			url = url.replace('[/revisionguid]', '/' + args['revisionguid'])
			if (args['revisionguid']) delete args['revisionguid']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/revisionguid]') !== -1) url = url.replace('[/revisionguid]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'search': function(args, opts) {
		var url = 'search'
		args = args || {}
		var rgx = new RegExp('\{nottagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		if (url.indexOf('[/nottagged]') !== -1) {
			url = url.replace('[/nottagged]', '/' + args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{intitle\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['intitle'])
			if (args['intitle']) delete args['intitle']
		}
		if (url.indexOf('[/intitle]') !== -1) {
			url = url.replace('[/intitle]', '/' + args['intitle'])
			if (args['intitle']) delete args['intitle']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/nottagged]') !== -1) url = url.replace('[/nottagged]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/intitle]') !== -1) url = url.replace('[/intitle]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'similar': function(args, opts) {
		var url = 'similar'
		args = args || {}
		var rgx = new RegExp('\{nottagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		if (url.indexOf('[/nottagged]') !== -1) {
			url = url.replace('[/nottagged]', '/' + args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/nottagged]') !== -1) url = url.replace('[/nottagged]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'stats': function(args, opts) {
		var url = 'stats'
		args = args || {}
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'tagsList': function(args, opts) {
		var url = 'tags'
		args = args || {}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'tagSynonymsList': function(args, opts) {
		var url = 'tags/synonyms'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'tagSynonymsGet': function(args, opts) {
		var url = 'tags/{tags}/synonyms'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'tagWikisGet': function(args, opts) {
		var url = 'tags/{tags}/wikis'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'topAnswerersInTagGet': function(args, opts) {
		var url = 'tags/{tag}/top-answerers/{period}'
		args = args || {}
		if (args['period'] == null) throw new Error('period is a required parameter')
		var rgx = new RegExp('\{period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['period'])
			if (args['period']) delete args['period']
		}
		if (url.indexOf('[/period]') !== -1) {
			url = url.replace('[/period]', '/' + args['period'])
			if (args['period']) delete args['period']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/period]') !== -1) url = url.replace('[/period]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'topAskersInTagGet': function(args, opts) {
		var url = 'tags/{tag}/top-askers/{period}'
		args = args || {}
		if (args['period'] == null) throw new Error('period is a required parameter')
		var rgx = new RegExp('\{period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['period'])
			if (args['period']) delete args['period']
		}
		if (url.indexOf('[/period]') !== -1) {
			url = url.replace('[/period]', '/' + args['period'])
			if (args['period']) delete args['period']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/period]') !== -1) url = url.replace('[/period]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'usersList': function(args, opts) {
		var url = 'users'
		args = args || {}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'usersGet': function(args, opts) {
		var url = 'users/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userAnswersGet': function(args, opts) {
		var url = 'users/{id}/answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userBadgesGet': function(args, opts) {
		var url = 'users/{id}/badges'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userCommentsGet': function(args, opts) {
		var url = 'users/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userCommentsToUserGet': function(args, opts) {
		var url = 'users/{id}/comments/{toid}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['toid'] == null) throw new Error('toid is a required parameter')
		var rgx = new RegExp('\{toid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['toid'])
			if (args['toid']) delete args['toid']
		}
		if (url.indexOf('[/toid]') !== -1) {
			url = url.replace('[/toid]', '/' + args['toid'])
			if (args['toid']) delete args['toid']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/toid]') !== -1) url = url.replace('[/toid]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userFavoritesGet': function(args, opts) {
		var url = 'users/{id}/favorites'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userMentionedGet': function(args, opts) {
		var url = 'users/{id}/mentioned'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userQuestionsGet': function(args, opts) {
		var url = 'users/{id}/questions'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userQuestionsNoAnswersGet': function(args, opts) {
		var url = 'users/{id}/questions/no-answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userQuestionsUnacceptedGet': function(args, opts) {
		var url = 'users/{id}/questions/unaccepted'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userQuestionsUnansweredGet': function(args, opts) {
		var url = 'users/{id}/questions/unanswered'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userReputationGet': function(args, opts) {
		var url = 'users/{id}/reputation'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userTagsGet': function(args, opts) {
		var url = 'users/{id}/tags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userTopTaggedAnswersGet': function(args, opts) {
		var url = 'users/{id}/tags/{tags}/top-answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userTopTaggedQuestionsGet': function(args, opts) {
		var url = 'users/{id}/tags/{tags}/top-questions'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/comments]') !== -1) {
			url = url.replace('[/comments]', '/' + args['comments'])
			if (args['comments']) delete args['comments']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/comments]') !== -1) url = url.replace('[/comments]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userTimelinesGet': function(args, opts) {
		var url = 'users/{id}/timeline'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userTopAnswerTagsGet': function(args, opts) {
		var url = 'users/{id}/top-answer-tags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'userTopQuestionTagsGet': function(args, opts) {
		var url = 'users/{id}/top-question-tags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	},
	'moderatorsGet': function(args, opts) {
		var url = 'users/moderators'
		args = args || {}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth: 'none'}, opts)
	}
})
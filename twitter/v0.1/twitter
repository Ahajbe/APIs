({
	auth:function(){return auth({provider:'twitter'})},
	'homeTimeline': function(args, opts) {
		var url = 'statuses/home_timeline.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		var rgx = new RegExp('\{exclud_replies\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['exclud_replies'])
			if (args['exclud_replies']) delete args['exclud_replies']
		}
		var rgx = new RegExp('\{contributor_details\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'userTimeline': function(args, opts) {
		var url = 'statuses/user_timeline.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		var rgx = new RegExp('\{exclude_replies\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['exclude_replies'])
			if (args['exclude_replies']) delete args['exclude_replies']
		}
		var rgx = new RegExp('\{contributor_details\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		var rgx = new RegExp('\{include_rts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_rts'])
			if (args['include_rts']) delete args['include_rts']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'mentionsTimeline': function(args, opts) {
		var url = 'statuses/mentions_timeline.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{contributor_details\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'retweetsOfMe': function(args, opts) {
		var url = 'statuses/retweets_of_me.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{include_user_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_user_entities'])
			if (args['include_user_entities']) delete args['include_user_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'showStatus': function(args, opts) {
		var url = 'statuses/show/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		var rgx = new RegExp('\{include_my_retweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_my_retweet'])
			if (args['include_my_retweet']) delete args['include_my_retweet']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'tweet': function(args, opts) {
		var url = 'statuses/update.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['status'] == null) throw new Error('status is a required parameter')
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{in_reply_to_status_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['in_reply_to_status_id'])
			if (args['in_reply_to_status_id']) delete args['in_reply_to_status_id']
		}
		var rgx = new RegExp('\{display_coordinates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['display_coordinates'])
			if (args['display_coordinates']) delete args['display_coordinates']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'destroyStatus': function(args, opts) {
		var url = 'statuses/destroy/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'retweet': function(args, opts) {
		var url = 'statuses/retweet/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'retweets': function(args, opts) {
		var url = 'statuses/retweets/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'showUser': function(args, opts) {
		var url = 'users/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'lookupUsers': function(args, opts) {
		var url = 'users/lookup.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'searchUsers': function(args, opts) {
		var url = 'users/search.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'usersSuggestions': function(args, opts) {
		var url = 'users/suggestions.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'usersSuggestionsCategory': function(args, opts) {
		var url = 'users/suggestions/{slug}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['slug'] == null) args['slug'] = "twitter"
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'directMessages': function(args, opts) {
		var url = 'direct_messages.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'directMessagesSent': function(args, opts) {
		var url = 'direct_messages/sent.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'showDirectMessage': function(args, opts) {
		var url = 'direct_messages/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'newDirectMessage': function(args, opts) {
		var url = 'direct_messages/new.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'destroyDirectMessage': function(args, opts) {
		var url = 'direct_messages/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'DELETE',params:args, auth: "oauth1"}, opts)
	},
	'follow': function(args, opts) {
		var url = 'friendships/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{follow\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['follow'])
			if (args['follow']) delete args['follow']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'unfollow': function(args, opts) {
		var url = 'friendships/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		return http({provider:'twitter',url:url,method:'DELETE',params:args, auth: "oauth1"}, opts)
	},
	'showFriendship': function(args, opts) {
		var url = 'friendships/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{source_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source_id'])
			if (args['source_id']) delete args['source_id']
		}
		var rgx = new RegExp('\{source_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source_screen_name'])
			if (args['source_screen_name']) delete args['source_screen_name']
		}
		var rgx = new RegExp('\{target_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['target_id'])
			if (args['target_id']) delete args['target_id']
		}
		var rgx = new RegExp('\{target_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['target_screen_name'])
			if (args['target_screen_name']) delete args['target_screen_name']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'incomingFriendships': function(args, opts) {
		var url = 'friendships/incoming.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'outgoingFriendships': function(args, opts) {
		var url = 'friendships/outgoing.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'friends': function(args, opts) {
		var url = 'friends/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'followers': function(args, opts) {
		var url = 'followers/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'accountVerifyCredentials': function(args, opts) {
		var url = 'account/verify_credentials.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'getLists': function(args, opts) {
		var url = 'lists/lists.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'listsMemberships': function(args, opts) {
		var url = 'lists/memberships.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{filter_to_owned_lists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_to_owned_lists'])
			if (args['filter_to_owned_lists']) delete args['filter_to_owned_lists']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'userListsSubscriptions': function(args, opts) {
		var url = 'lists/subscriptions.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'userListShow': function(args, opts) {
		var url = 'lists/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'listStatuses': function(args, opts) {
		var url = 'lists/statuses.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{include_rts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_rts'])
			if (args['include_rts']) delete args['include_rts']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'createList': function(args, opts) {
		var url = 'lists/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'updateList': function(args, opts) {
		var url = 'lists/update.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'destroyList': function(args, opts) {
		var url = 'lists/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'listmembers': function(args, opts) {
		var url = 'lists/members.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'memberIsInList': function(args, opts) {
		var url = 'lists/members/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'listAddMember': function(args, opts) {
		var url = 'lists/members/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['list_id'] == null) throw new Error('list_id is a required parameter')
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (args['slug'] == null) throw new Error('slug is a required parameter')
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'listAddMembers': function(args, opts) {
		var url = 'lists/members/create_all.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'listRemoveMember': function(args, opts) {
		var url = 'lists/members/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'listSubscribers': function(args, opts) {
		var url = 'lists/subscribers.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'isSubscriber': function(args, opts) {
		var url = 'lists/subscribers/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'listSubscribeMe': function(args, opts) {
		var url = 'lists/subscribers/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'listUnsubscribeMe': function(args, opts) {
		var url = 'lists/subscribers/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'accountUpdateProfileColors': function(args, opts) {
		var url = 'account/update_profile_colors.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{profile_background_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_background_color'])
			if (args['profile_background_color']) delete args['profile_background_color']
		}
		var rgx = new RegExp('\{profile_link_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_link_color'])
			if (args['profile_link_color']) delete args['profile_link_color']
		}
		var rgx = new RegExp('\{profile_sidebar_border_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_sidebar_border_color'])
			if (args['profile_sidebar_border_color']) delete args['profile_sidebar_border_color']
		}
		var rgx = new RegExp('\{profile_sidebar_fill_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_sidebar_fill_color'])
			if (args['profile_sidebar_fill_color']) delete args['profile_sidebar_fill_color']
		}
		var rgx = new RegExp('\{profile_text_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_text_color'])
			if (args['profile_text_color']) delete args['profile_text_color']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'accountUpdateProfileImage': function(args, opts) {
		var url = 'account/update_profile_image.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['image'] == null) throw new Error('image is a required parameter')
		var rgx = new RegExp('\{image\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['image'])
			if (args['image']) delete args['image']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'accountUpdateProfileBackgroundImage': function(args, opts) {
		var url = 'account/update_profile_background_image.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{tile\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tile'])
			if (args['tile']) delete args['tile']
		}
		var rgx = new RegExp('\{image\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['image'])
			if (args['image']) delete args['image']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{use\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['use'])
			if (args['use']) delete args['use']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'accountUpdateProfile': function(args, opts) {
		var url = 'account/update_profile.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{location\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['location'])
			if (args['location']) delete args['location']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'favorites': function(args, opts) {
		var url = 'favorites/list.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'favoriteStatus': function(args, opts) {
		var url = 'favorites/create/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'unfavoriteStatus': function(args, opts) {
		var url = 'favorites/destroy/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'DELETE',params:args, auth: "oauth1"}, opts)
	},
	'blockUser': function(args, opts) {
		var url = 'blocks/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'unblockUser': function(args, opts) {
		var url = 'blocks/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		return http({provider:'twitter',url:url,method:'DELETE',params:args, auth: "oauth1"}, opts)
	},
	'blocksList': function(args, opts) {
		var url = 'blocks/list.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'blockedIds': function(args, opts) {
		var url = 'blocks/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{sringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sringify_ids'])
			if (args['sringify_ids']) delete args['sringify_ids']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'reportSpam': function(args, opts) {
		var url = 'report_spam.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'savedSearches': function(args, opts) {
		var url = 'saved_searches/list.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'savedSearchesById': function(args, opts) {
		var url = 'saved_searches/show/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'createSavedSearch': function(args, opts) {
		var url = 'saved_searches/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['query'] == null) throw new Error('query is a required parameter')
		var rgx = new RegExp('\{query\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['query'])
			if (args['query']) delete args['query']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'deleteSavedSearch': function(args, opts) {
		var url = 'saved_searches/destroy/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		return http({provider:'twitter',url:url,method:'DELETE',params:args, auth: "oauth1"}, opts)
	},
	'userTrendingLocations': function(args, opts) {
		var url = 'trends/available.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'trendingTopics': function(args, opts) {
		var url = 'trends/place.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (args['exclude'] == null) throw new Error('exclude is a required parameter')
		var rgx = new RegExp('\{exclude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['exclude'])
			if (args['exclude']) delete args['exclude']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'closestTrendsTo': function(args, opts) {
		var url = 'trends/closest.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (args['long'] == null) throw new Error('long is a required parameter')
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'geoSearch': function(args, opts) {
		var url = 'geo/search.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{ip\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ip'])
			if (args['ip']) delete args['ip']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{max_results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_results'])
			if (args['max_results']) delete args['max_results']
		}
		var rgx = new RegExp('\{granularity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['granularity'])
			if (args['granularity']) delete args['granularity']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		var rgx = new RegExp('\{contained_within\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		var rgx = new RegExp('\{street_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'geoSimilarPlaces': function(args, opts) {
		var url = 'geo/similar_places.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{contained_within\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		var rgx = new RegExp('\{street_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'geocode': function(args, opts) {
		var url = 'geo/reverse_geocode.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{max_results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_results'])
			if (args['max_results']) delete args['max_results']
		}
		var rgx = new RegExp('\{granularity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['granularity'])
			if (args['granularity']) delete args['granularity']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'getPlaceInfo': function(args, opts) {
		var url = 'geo/id/{place_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['place_id'] == null) throw new Error('place_id is a required parameter')
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'createPlace': function(args, opts) {
		var url = 'geo/place.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		var rgx = new RegExp('\{contained_within\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		var rgx = new RegExp('\{street_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'configuration': function(args, opts) {
		var url = 'help/configuration.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'termsOfService': function(args, opts) {
		var url = 'help/tos.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'privacyPolicy': function(args, opts) {
		var url = 'help/privacy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'friendsIds': function(args, opts) {
		var url = 'friends/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	},
	'accountUpdateDeliveryDevice': function(args, opts) {
		var url = 'account/update_delivery_device.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['device'] == null) throw new Error('device is a required parameter')
		var rgx = new RegExp('\{device\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['device'])
			if (args['device']) delete args['device']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'POST',params:args, auth: "oauth1"}, opts)
	},
	'search': function(args, opts) {
		var url = 'search.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{geocode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geocode'])
			if (args['geocode']) delete args['geocode']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		var rgx = new RegExp('\{locale\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['locale'])
			if (args['locale']) delete args['locale']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{result_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['result_type'])
			if (args['result_type']) delete args['result_type']
		}
		var rgx = new RegExp('\{rpp\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rpp'])
			if (args['rpp']) delete args['rpp']
		}
		var rgx = new RegExp('\{show_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['show_user'])
			if (args['show_user']) delete args['show_user']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		return http({provider:'twitter',url:url,method:'GET',params:args, auth: "oauth1"}, opts)
	}
})
({
	auth:function(){return auth({provider:fs('/bin/imgur')})},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'Account': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'AccountAlbumCount': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/albums/count'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [id] 
 * @methodhttp DELETE
 */
	'AccountAlbumDeletion': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/album/{id}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'AccountAlbumIds': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/albums/ids'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [id] 
 * @methodhttp GET
 */
	'AccountAlbumInformation': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/album/{id}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {number} page Allows you to set the page number so you don't have to retrieve all the data at once.
 * @methodhttp GET
 */
	'AccountAlbums': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/albums'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1 && args['/page']) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [id] 
 * @methodhttp DELETE
 */
	'AccountCommentDeletion': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/comment/{id}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'AccountComments': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/comments'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] Username of the account
 * @methodhttp POST
 */
	'AccountCreation': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] Username of the account
 * @methodhttp DELETE
 */
	'AccountDeletion': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [id] 
 * @methodhttp GET
 */
	'AccountImageInformation': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/image/{id}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [page] 
 * @methodhttp GET
 */
	'AccountImages': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/images/{page}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['page'] == null) throw new Error('page is a required parameter')
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'AccountImagesCount': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/images/count'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'AccountImagesIds': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/images/ids'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'AccountLikes': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/likes'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} new false for all notifications, true for only non-viewed notification. Default is true.
 * @methodhttp GET
 */
	'AccountMessages': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/notifications/messages'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		var rgx = new RegExp('\{new\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['new'])
			if (args['new']) delete args['new']
		}
		if (url.indexOf('[/new]') !== -1 && args['/new']) {
			url = url.replace('[/new]', '/' + args['new'])
			if (args['new']) delete args['new']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/new]') !== -1) url = url.replace('[/new]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [type] 
 * @methodhttp GET
 */
	'AccountNotifications': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/notifications/{type}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [body] The text of the message. Similar to the body of an email.
 * @param {string} subject The subject of the message
 * @param {string} parent_id The ID of the first message in the thread, by setting this, the message will be threaded to the given message.
 * @methodhttp POST
 */
	'AccountSendMessage': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/message'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['body'] == null) throw new Error('body is a required parameter')
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{subject\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subject'])
			if (args['subject']) delete args['subject']
		}
		if (url.indexOf('[/subject]') !== -1 && args['/subject']) {
			url = url.replace('[/subject]', '/' + args['subject'])
			if (args['subject']) delete args['subject']
		}
		var rgx = new RegExp('\{parent_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['parent_id'])
			if (args['parent_id']) delete args['parent_id']
		}
		if (url.indexOf('[/parent_id]') !== -1 && args['/parent_id']) {
			url = url.replace('[/parent_id]', '/' + args['parent_id'])
			if (args['parent_id']) delete args['parent_id']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/subject]') !== -1) url = url.replace('[/subject]', '')
		if (url.indexOf('[/parent_id]') !== -1) url = url.replace('[/parent_id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [user] 
 * @methodhttp GET
 */
	'AccountSettings': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{user}/settings'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'AccountStatistics': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/stats'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @param {string} [ids] IDs of images to be added to the album, can be sent as array with multiple images
 * @methodhttp POST
 */
	'AddAlbumImages': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/album/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['ids'] == null) throw new Error('ids is a required parameter')
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'Album': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/album/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [album_id] The 5 character string for the album id
 * @param {string} [image_id] The id of 5 characters for the image
 * @methodhttp GET
 */
	'AlbumImage': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/album/{album_id}/image/{image_id}'
		args = args || {}
		if (args['album_id'] == null) throw new Error('album_id is a required parameter')
		var rgx = new RegExp('\{album_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		if (url.indexOf('[/album_id]') !== -1) {
			url = url.replace('[/album_id]', '/' + args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		if (args['image_id'] == null) throw new Error('image_id is a required parameter')
		var rgx = new RegExp('\{image_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['image_id'])
			if (args['image_id']) delete args['image_id']
		}
		if (url.indexOf('[/image_id]') !== -1) {
			url = url.replace('[/image_id]', '/' + args['image_id'])
			if (args['image_id']) delete args['image_id']
		}
		if (url.indexOf('[/album_id]') !== -1) url = url.replace('[/album_id]', '')
		if (url.indexOf('[/image_id]') !== -1) url = url.replace('[/image_id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'AlbumImages': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/album/{id}/images'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} ids The images you want to include in the album
 * @methodhttp POST
 */
	'AlbumUpload': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/album'
		args = args || {}
		var rgx = new RegExp('\{ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1 && args['/ids']) {
			url = url.replace('[/ids]', '/' + args['ids'])
			if (args['ids']) delete args['ids']
		}
		if (url.indexOf('[/ids]') !== -1) url = url.replace('[/ids]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp DELETE
 */
	'Albumdelete': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/album/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'Comment': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/comment/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'CommentCount': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/comments/count'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp DELETE
 */
	'CommentDelete': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/comment/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @methodhttp GET
 */
	'CommentIDs': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/comments/ids'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'CommentReplies': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/comment/{id}/replies'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @param {string} [vote] 
 * @methodhttp POST
 */
	'CommentVote': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/comment/{id}/vote/{vote}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['vote'] == null) throw new Error('vote is a required parameter')
		var rgx = new RegExp('\{vote\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['vote'])
			if (args['vote']) delete args['vote']
		}
		if (url.indexOf('[/vote]') !== -1) {
			url = url.replace('[/vote]', '/' + args['vote'])
			if (args['vote']) delete args['vote']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/vote]') !== -1) url = url.replace('[/vote]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} [id] 
 * @methodhttp DELETE
 */
	'DeleteAccountImage': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/image/{id}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [sort] 
 * @param {string} [page] 
 * @methodhttp GET
 */
	'Gallery': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/{sort}/{page}'
		args = args || {}
		if (args['sort'] == null) throw new Error('sort is a required parameter')
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['page'] == null) throw new Error('page is a required parameter')
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @param {string} [comment] The comment you want to create on image
 * @methodhttp POST
 */
	'GalleryCommentCreation': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/comment'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['comment'] == null) throw new Error('comment is a required parameter')
		var rgx = new RegExp('\{comment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/comment]') !== -1) {
			url = url.replace('[/comment]', '/' + args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/comment]') !== -1) url = url.replace('[/comment]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @param {string} [comment] The reply to a comment
 * @methodhttp POST
 */
	'GalleryCommentReply': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/comment/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['comment'] == null) throw new Error('comment is a required parameter')
		var rgx = new RegExp('\{comment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/comment]') !== -1) {
			url = url.replace('[/comment]', '/' + args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/comment]') !== -1) url = url.replace('[/comment]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'GalleryImage': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'GalleryImageCommentCount': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/comments/count'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp DELETE
 */
	'GalleryImageCommentDelete': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/comment/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'GalleryImageCommentIds': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/comments/ids'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'GalleryImageComments': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @param {string} [vote] 
 * @methodhttp POST
 */
	'GalleryImageVote': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/vote/{vote}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['vote'] == null) throw new Error('vote is a required parameter')
		var rgx = new RegExp('\{vote\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['vote'])
			if (args['vote']) delete args['vote']
		}
		if (url.indexOf('[/vote]') !== -1) {
			url = url.replace('[/vote]', '/' + args['vote'])
			if (args['vote']) delete args['vote']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/vote]') !== -1) url = url.replace('[/vote]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'GalleryImageVotes': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}/votes'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [q] The query string
 * @methodhttp GET
 */
	'GallerySearch': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/search'
		args = args || {}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'Image': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/image/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [deletehash] Deletehash of an image
 * @methodhttp DELETE
 */
	'ImageDelete': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/image/{deletehash}'
		args = args || {}
		if (args['deletehash'] == null) throw new Error('deletehash is a required parameter')
		var rgx = new RegExp('\{deletehash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['deletehash'])
			if (args['deletehash']) delete args['deletehash']
		}
		if (url.indexOf('[/deletehash]') !== -1) {
			url = url.replace('[/deletehash]', '/' + args['deletehash'])
			if (args['deletehash']) delete args['deletehash']
		}
		if (url.indexOf('[/deletehash]') !== -1) url = url.replace('[/deletehash]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [image] The binary data, a url string, or base64 data
 * @param {string} album_id ID of the album to upload to
 * @param {string} type The type of image being uploaded : binary, url, base64
 * @param {string} title A title for the image
 * @param {string} description A description of the image
 * @methodhttp POST
 */
	'ImageUpload': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/image'
		args = args || {}
		if (args['image'] == null) throw new Error('image is a required parameter')
		var rgx = new RegExp('\{image\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['image'])
			if (args['image']) delete args['image']
		}
		if (url.indexOf('[/image]') !== -1) {
			url = url.replace('[/image]', '/' + args['image'])
			if (args['image']) delete args['image']
		}
		var rgx = new RegExp('\{album_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		if (url.indexOf('[/album_id]') !== -1 && args['/album_id']) {
			url = url.replace('[/album_id]', '/' + args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1 && args['/type']) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1 && args['/title']) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1 && args['/description']) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/image]') !== -1) url = url.replace('[/image]', '')
		if (url.indexOf('[/album_id]') !== -1) url = url.replace('[/album_id]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [image] A binary file, base64 data, or a URL for an image
 * @param {string} album_id The id of the album you want to add the image to
 * @param {string} [type] The type of the file that's being sent; file, base64 or URL
 * @param {string} [name] The name of the file, this is automatically detected if uploading a file with a POST and multipart / form-data
 * @param {string} [title] The title of the image.
 * @param {string} [description] The description of the image.
 * @methodhttp POST
 */
	'ImageUploadAlternative': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/upload'
		args = args || {}
		if (args['image'] == null) throw new Error('image is a required parameter')
		var rgx = new RegExp('\{image\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['image'])
			if (args['image']) delete args['image']
		}
		if (url.indexOf('[/image]') !== -1) {
			url = url.replace('[/image]', '/' + args['image'])
			if (args['image']) delete args['image']
		}
		var rgx = new RegExp('\{album_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		if (url.indexOf('[/album_id]') !== -1 && args['/album_id']) {
			url = url.replace('[/album_id]', '/' + args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/image]') !== -1) url = url.replace('[/image]', '')
		if (url.indexOf('[/album_id]') !== -1) url = url.replace('[/album_id]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @methodhttp GET
 */
	'Notification': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/notification/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] The ID of the notification
 * @methodhttp DELETE
 */
	'NotificationViewed': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/notification/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @methodhttp GET
 */
	'Notifications': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/notification'
		args = args || {}
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] The ID of the gallery item
 * @methodhttp DELETE
 */
	'RemovefromGallery': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'DELETE',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] ID of the comment
 * @methodhttp POST
 */
	'ReportComment': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/comment/{id}/report'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [subreddit] the subreddit
 * @param {string} [sort] the sort
 * @param {string} [page] the page number
 * @methodhttp GET
 */
	'SubredditGalleries': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/r/{subreddit}/{sort}/{page}'
		args = args || {}
		if (args['subreddit'] == null) throw new Error('subreddit is a required parameter')
		var rgx = new RegExp('\{subreddit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subreddit'])
			if (args['subreddit']) delete args['subreddit']
		}
		if (url.indexOf('[/subreddit]') !== -1) {
			url = url.replace('[/subreddit]', '/' + args['subreddit'])
			if (args['subreddit']) delete args['subreddit']
		}
		if (args['sort'] == null) throw new Error('sort is a required parameter')
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['page'] == null) throw new Error('page is a required parameter')
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/subreddit]') !== -1) url = url.replace('[/subreddit]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'GET',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [username] 
 * @param {string} email Change the users email
 * @param {number} public_images Use 0 or 1 for the boolean value
 * @param {number} album_privacy Use 0 or 1 for the boolean value
 * @param {string} messaging_enabled Use 0 or 1 for the boolean value
 * @methodhttp POST
 */
	'UpdateAccountSettings': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/account/{username}/settings'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1 && args['/email']) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{public_images\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['public_images'])
			if (args['public_images']) delete args['public_images']
		}
		if (url.indexOf('[/public_images]') !== -1 && args['/public_images']) {
			url = url.replace('[/public_images]', '/' + args['public_images'])
			if (args['public_images']) delete args['public_images']
		}
		var rgx = new RegExp('\{album_privacy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album_privacy'])
			if (args['album_privacy']) delete args['album_privacy']
		}
		if (url.indexOf('[/album_privacy]') !== -1 && args['/album_privacy']) {
			url = url.replace('[/album_privacy]', '/' + args['album_privacy'])
			if (args['album_privacy']) delete args['album_privacy']
		}
		var rgx = new RegExp('\{messaging_enabled\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['messaging_enabled'])
			if (args['messaging_enabled']) delete args['messaging_enabled']
		}
		if (url.indexOf('[/messaging_enabled]') !== -1 && args['/messaging_enabled']) {
			url = url.replace('[/messaging_enabled]', '/' + args['messaging_enabled'])
			if (args['messaging_enabled']) delete args['messaging_enabled']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/public_images]') !== -1) url = url.replace('[/public_images]', '')
		if (url.indexOf('[/album_privacy]') !== -1) url = url.replace('[/album_privacy]', '')
		if (url.indexOf('[/messaging_enabled]') !== -1) url = url.replace('[/messaging_enabled]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	},
/** 
 * @category All
 * @param {string} [id] 
 * @param {string} [title] This is the title that will be set in the gallery.
 * @param {number} terms If set to 1, the terms of the gallery are set.  This also allows you to by-pass our terms.  If you wish to set your own terms to upload the gallery there will be an error returned if they have not accepted the terms.
 * @methodhttp POST
 */
	'UploadImagetoGallery': function(args, opts) {
		var url = 'https://imgur-apiv3.p.mashape.com/3/gallery/image/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{terms\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['terms'])
			if (args['terms']) delete args['terms']
		}
		if (url.indexOf('[/terms]') !== -1 && args['/terms']) {
			url = url.replace('[/terms]', '/' + args['terms'])
			if (args['terms']) delete args['terms']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/terms]') !== -1) url = url.replace('[/terms]', '')
		return http({provider:fs('/bin/imgur'),url:url,method:'POST',params:args}, opts)
	}
})